{
  "success": true,
  "data": [
    {
      "id": "639ebb35f0ccae2b10e0fb64",
      "author_id": "56f3686f02c237a73a1a8acf",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>CNode TG Channel 开启 !</p>\n<p>Channel 将定期推送最新技术文章、资讯以及活动，欢迎订阅！</p>\n<p><a href=\"https://t.me/cnode_js\">https://t.me/cnode_js</a></p>\n<p><img src=\"//static.cnodejs.org/FkwbDvoUIeRAccpPd6f53rgXwrDz\" alt=\"qrcode_tg_channel_cnode.png\"></p>\n<blockquote>\n<p>Tips: 订阅后点击 “设置- View Discussion” 即可加入交流群!</p>\n</blockquote>\n</div>",
      "title": "CNode - TG 频道",
      "last_reply_at": "2023-10-07T08:16:58.679Z",
      "good": false,
      "top": true,
      "reply_count": 29,
      "visit_count": 278622,
      "create_at": "2022-12-18T07:03:17.900Z",
      "author": {
        "loginname": "thonatos",
        "avatar_url": "https://avatars.githubusercontent.com/u/958063?v=4&s=120"
      }
    },
    {
      "id": "6262718079f90d94a6a0d2f5",
      "author_id": "4f447c2f0a8abae26e01b27d",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h2>概述</h2>\n<p>Node.js 刚刚发布了 18.0.0 版本，内置了 <code>fetch</code>、<code>node:test</code> 等标准模块。</p>\n<p><strong>一句话点评：std lib 在标准化，user lib 在精细化。</strong></p>\n<blockquote>\n<p>原文地址：<a href=\"https://zhuanlan.zhihu.com/p/502951532\">EggJS 知乎专栏</a>，求点赞。</p>\n</blockquote>\n<hr>\n<h2>如何快速体验</h2>\n<p>推荐用 <a href=\"https://github.com/Schniz/fnm\">fnm</a>，<a href=\"https://github.com/jasongin/nvs\">nvs</a>，<a href=\"https://github.com/nvm-sh/nvm\">nvm</a> 等 Node.js 版本管理器。</p>\n<pre class=\"prettyprint language-bash\"><code>$ fnm install 18\nInstalling Node v18.0.0 (arm64)\n\n$ fnm use 18\nUsing Node v18.0.0\n\n$ node -v\nv18.0.0\n</code></pre><p>需要注意的是，该版本不是 LTS 版本，请勿在生产环境使用，需要等到 2022-10-25 才会成为 LTS 版本。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/012135a1091b40ef807c8b6e3919bcce~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" title=\"https://github.com/nodejs/Release\"></p>\n<h2>Looking to the future</h2>\n<blockquote>\n<p>The project is also continuing its ‘Next 10’ effort.  The goal of this effort is to reflect on what led to success in the first 10 years of Node.js and set the direction for success in the next 10.</p>\n</blockquote>\n<p>Node.js 官方启动了 <a href=\"https://github.com/nodejs/next-10\">next-10</a> 工作，并讨论出了<a href=\"https://github.com/nodejs/node/blob/master/doc/contributing/technical-priorities.md\">未来重要的几件事</a>：</p>\n<ul>\n<li>现代化的 HTTP</li>\n<li>友好的类型支持</li>\n<li>对初学者更友好的渐进式文档</li>\n<li>对 ECMAScript 规范的支持和及时跟进</li>\n<li>可观测性，包括 logging/metrics/tracing，以及 APM 等</li>\n<li>更好的多线程支持</li>\n<li>支持打包为单文件的分发方式</li>\n</ul>\n<p>譬如前面说的 Fetch 就和 Modern HTTP 的会议讨论有关，<a href=\"https://github.com/nodejs/next-10/blob/main/meetings/summit-jan-2022.md\">相关纪要</a>。</p>\n<blockquote>\n<p>6 月份的 OpenJS World 会议中将分享 ESM 和 Observability 进展，可以关注下相关动态。</p>\n</blockquote>\n<hr>\n<h2>Fetch API</h2>\n<p>前端同学应该都很熟悉<code>fetch()</code>这个 API，它提供了标准的网络请求能力，取代了远古的  XMLHttpRequest 。</p>\n<p>反观 Node.js 侧，官方提供的 <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/http.html#httprequesturl-options-callback\">http.request()</a>，太底层太基础了，用起来往往需要大量的封装。譬如 302 后自动跳转、文件上传、响应结果解析等等。</p>\n<p>因此在 Node.js 社区有非常多的上层请求库封装：</p>\n<ul>\n<li>曾经广受社区欢迎的 request 库去年<a href=\"https://github.com/request/request/issues/3142\">宣布停止维护</a>后，也引起了社区比较大的混乱。。</li>\n<li>我们 Egg 内置的是 <a href=\"https://www.npmjs.com/package/urllib\">urllib</a>，沉淀了阿里多年在网络请求上踩的坑，足够稳定，不过代码也有点久远了。</li>\n<li>更多参见 <a href=\"https://github.com/request/request/issues/3143\">Alternative libraries to request</a> 以及 <a href=\"https://zhuanlan.zhihu.com/p/415361629\">《天猪：那些你应该说再见的 npm 祖传老库》</a>。</li>\n</ul>\n<p><strong>去年 Node.js 官方推出了 <strong><a href=\"https://undici.nodejs.org/\"><strong>undici</strong></a></strong>，一个非常现代化的库，具备优越的性能，良好的扩展性，内置的 mock 等能力，集大成者。</strong></p>\n<blockquote>\n<p>undici 的命名也很有趣：A HTTP/1.1 client → 11 → Eleven → Undici，即意大利语的 11。</p>\n</blockquote>\n<p>从而 <strong>Node.js 终于内置了新的请求库</strong>，它遵循 <a href=\"https://fetch.spec.whatwg.org/\">Fetch 规范</a>，底层就是基于 undici 来实现的。</p>\n<pre class=\"prettyprint language-javascript\"><code>const res = await fetch(&#x27;https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;documentation.json&#x27;);\nif (res.ok) {\n  const data = await res.json();\n  console.log(data);\n}\n</code></pre><p>就这么简单，比 <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/http.html#httprequesturl-options-callback\">http.request()</a> 那一坨 callback-style 代码简洁多了，平时写个脚本啥的，不用再引入额外的类库了。</p>\n<p>全局增加了 fetch, FormData, Headers, Request, Response 这几个 API，以及 Web Streams API。</p>\n<p>目前还处于默认开启的实验性特性阶段，文档在 <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/globals.html#fetch\">Globals</a> 章节，近乎没有，有需要直接看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">MDN 文档</a> 即可。</p>\n<p>可能是为了遵循规范， undici 的很多能力如 Mock，Proxy，Pool 等都没有提供出来。</p>\n<hr>\n<h2>Test Runner</h2>\n<p>单元测试很重要，很多新兴的编程语言都是会内置对应的能力，但前端这块一直都是由社区来实现，前端同学耳熟能详的 Test Runner 有 <a href=\"https://mochajs.org/\">Mocha</a>、<a href=\"https://jestjs.io/\">Jest</a>。</p>\n<pre class=\"prettyprint language-javascript\"><code>&#x2F;&#x2F; mocha showcase\nimport assert from &#x27;assert&#x2F;strict&#x27;;\n\ndescribe(&#x27;test&#x2F;index.test.js&#x27;, () =&gt; {\n  it(&#x27;test1&#x27;, async () =&gt; {\n    const res = await fetch(&#x27;https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;documentation.json&#x27;);\n    assert(res.ok);\n  });\n  \n  it.skip(&#x27;skip some test&#x27;, () =&gt; {});\n});\n</code></pre><p>终于，Node.js 在 18.x 里官方支持了 <a href=\"https://nodejs.org/dist/latest-v18.x/docs/api/test.html\">Test 能力</a>：</p>\n<pre class=\"prettyprint language-javascript\"><code>import test from &#x27;node:test&#x27;;\nimport assert from &#x27;assert&#x2F;strict&#x27;;\n\n&#x2F;&#x2F; 等价于 describe()\ntest(&#x27;asynchronous passing test&#x27;, async () =&gt; {\n  const res = await fetch(&#x27;https:&#x2F;&#x2F;nodejs.org&#x2F;api&#x2F;documentation.json&#x27;);\n  assert(res.ok);\n});\n\ntest(&#x27;multi level test&#x27;, async (t) =&gt; {\n  &#x2F;&#x2F; 等价于 it()\n  await t.test(&#x27;subtest 1&#x27;, (t) =&gt; {\n    assert.strictEqual(1, 1);\n  });\n\n  await t.test(&#x27;subtest 2&#x27;, (t) =&gt; {\n    assert.strictEqual(2, 2);\n  });\n});\n\n&#x2F;&#x2F; 等价于 describe.skip() &#x2F; it.skip()\ntest(&#x27;skip option&#x27;, { skip: true }, () =&gt; {});\n\n&#x2F;&#x2F; 等价于 describe.only() &#x2F; it.only()\ntest(&#x27;only option&#x27;, { only: true }, () =&gt; {});\n</code></pre><p>可以看到：</p>\n<ul>\n<li>语法其实差不多，会更简洁一点，就一个 <code>test()</code>，options 除了 skip 和 only 外，还支持 concurrency 并发。</li>\n<li>无需启动器，每一个文件都是一个可执行的 Node.js 代码。</li>\n<li>暂未支持 <code>before/after/beforeEach/afterEach</code> 能力，看 issue 描述会后续支持。</li>\n<li>暂未支持 Reporter，但日志输出为标准 <a href=\"https://testanything.org/\">TAP</a> 格式，所以应该很容易能复用现有的社区生态。</li>\n</ul>\n<p>类似覆盖率的演进过程，以前我们需要通过 nyc 对代码转译打桩，现在变为的 Node.js 内置覆盖率输出，nyc 变为 c8 这样的覆盖率报告生成工具。</p>\n<p>后续 mocha 等估计会变为类似的上层封装，提供批量执行 和 Reporter 等能力。</p>\n<hr>\n<h2>Build-time user-land snapshot</h2>\n<p>简单的说，可以把某个 js 直接编译成 v8 snapshot，从而可以极大的提速启动时间。</p>\n<p>目前这个版本，还只能通过 Node.js 源码来编译，且只能编译成 Node.js Runtime 的方式，即 Build-time。</p>\n<pre class=\"prettyprint language-bash\"><code># 把一段 markdown 渲染的逻辑，直接打包到 Node Runtime\n$ cd &#x2F;path&#x2F;to&#x2F;node&#x2F;source\n$ .&#x2F;configure --node-snapshot-main=marked.js\n$ make node\n\n# 执行编译好的 Node Runtime\n$ out&#x2F;Release&#x2F;node\n&gt; const html = globalThis.marked(&#x27;# this is title&#x27;);\n</code></pre><p>秋怡正在继续推进<a href=\"https://github.com/nodejs/node/issues/35711\">该能力</a>，未来可以无需编译 Node.js 源码：</p>\n<pre class=\"prettyprint language-bash\"><code>$ node --build-snapshot --snapshot-blob marked.blob marked.js \n$ node --snapshot-blob marked.blob\n</code></pre><p>PS：这个能力用在命令行 CLI 的独立打包好像也不错。<a href=\"https://github.com/nodejs/node/issues/42566\">https://github.com/nodejs/node/issues/42566</a></p>\n<hr>\n<h2>V8 引擎升级</h2>\n<p>内置的 V8 引擎升级到 10.1 版本，值得注意的特性：</p>\n<ul>\n<li>class fields 和 private class methods 的性能优化。</li>\n<li><a href=\"https://v8.dev/blog/v8-release-99#intl.locale-extensions\">Intl 规范</a> 的支持，在做日期的本地化，字符串处理的时候非常有用。</li>\n<li>数组支持 findLast() 和 findLastIndex() 等。</li>\n</ul>\n<p>秋怡也写了一篇文章 <a href=\"https://v8.dev/blog/faster-class-features\">Faster initialization of instances with new class features</a> 分享了背后的实现。</p>\n<p>PS：<a href=\"https://mp.weixin.qq.com/s/6PTcjJQTED3WpJH8ToXInw\">ECMAScript 双月报告：装饰器提案进入 Stage 3</a> ，阿里的 Node 架构团队今年会推动 Decorator 方案在 V8 的落地实现，不过肯定赶不上了，只能 Node.js 20.x 见了。</p>\n<hr>\n<h2>ESM 的支持</h2>\n<p>虽然在 18.x 中没有新的内容，但在过去的几个月中一直在持续推动 ECMAScript模块实现：</p>\n<ul>\n<li>对 <a href=\"https://github.com/tc39/proposal-import-assertions\">JSON Import Assertions</a> 的支持。</li>\n<li>JSON 模块的正式支持。</li>\n<li>对 HTTPS 和 HTTP 导入的实验性支持。</li>\n<li><a href=\"https://github.com/nodejs/loaders\">Node.js 加载器团队</a>也在继续开发 ECMAScript 模块加载器实现。</li>\n</ul>\n<hr>\n<h2>工具链和编译器的升级</h2>\n<ul>\n<li>Linux 版是在 RHEL8 上构建的，要求 glibc 2.28 以上版本。</li>\n<li>macOS 要求 10.15 以上版本。</li>\n<li>Windows 很多旧版本也不支持了。</li>\n</ul>\n<p>PS：CentOS 7 官方不再维护了，它对应的 glibc 版本太低，所以升不了。。。</p>\n<ul>\n<li><a href=\"https://developer.aliyun.com/article/780803\">centos7和8不维护停止更新之后，服务器选择使用什么系统好？</a></li>\n<li><a href=\"https://github.com/nodejs/node/pull/42659\">doc: update minimum glibc requirements for Linux by richardlau</a></li>\n</ul>\n<hr>\n<h2>相关资料</h2>\n<ul>\n<li><a href=\"https://nodejs.org/en/blog/announcements/v18-release-announce\">https://nodejs.org/en/blog/announcements/v18-release-announce</a></li>\n<li><a href=\"https://nodejs.org/en/blog/release/v18.0.0/\">https://nodejs.org/en/blog/release/v18.0.0/</a></li>\n</ul>\n</div>",
      "title": "Node.js 18 新特性解读",
      "last_reply_at": "2023-09-16T11:13:12.252Z",
      "good": false,
      "top": true,
      "reply_count": 36,
      "visit_count": 128605,
      "create_at": "2022-04-22T09:12:32.716Z",
      "author": {
        "loginname": "atian25",
        "avatar_url": "https://avatars.githubusercontent.com/u/227713?v=4&s=120"
      }
    },
    {
      "id": "61f69e4aa08b39f75309c2a8",
      "author_id": "4efc278525fa69ac6900000f",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><a href=\"https://registry.npmmirror.com\">https://registry.npmmirror.com</a> 中国 npm 镜像源在2013年12月开始就使用基于 koa 的 <a href=\"https://github.com/cnpm/cnpmjs.org\">https://github.com/cnpm/cnpmjs.org</a> 私有 npm 应用搭建，这些年 node 应用框架在快速换代升级，连我们自己造的 egg 都要升级到 TypeScript 了，所以在 2021 年我们启动了 <a href=\"http://cnpmjs.org\">cnpmjs.org</a> 的技术升级重构，基于 egg 的 TypeScript 模式重新实现 <a href=\"https://github.com/cnpm/cnpmcore\">https://github.com/cnpm/cnpmcore</a> 。</p>\n<p>npm registry 的接口是 100% 实现迁移，然后在数据同步上通过数据库实现足够简单的任务系统，已经在 2022年1月30日完全老数据迁移。\n非常感谢阿里云这么多年来的对中国 npm 镜像云服务器的开源赞助，只能靠仅有的广告位和每年的感谢帖子来回报这份天价的云资源账单。这一次重构之后，我们验证下来至少可以节省一半的云服务器资源，也算是让阿里云的开源赞助可以减轻一些成本负担。</p>\n<p>当然 cnpmcore 不仅仅是为了技术升级，我们的核心新能力会跟随 npmfs 黑科技在 2022 年发布出来，到时候 npm install 的安装速度会在 cli 侧和 registry 侧同时发力，让 npm 模块安装速度在可预见的未来达到秒级。</p>\n<p>PS：预估你在此期间遇到包数据同步和丢失问题，请先手动同步一次，如果还是没有，请回帖反馈给我们。</p>\n</div>",
      "title": "中国 npm 镜像源升级公告",
      "last_reply_at": "2023-05-05T13:07:12.548Z",
      "good": false,
      "top": true,
      "reply_count": 47,
      "visit_count": 195424,
      "create_at": "2022-01-30T14:18:50.170Z",
      "author": {
        "loginname": "fengmk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/156269?v=4&s=120"
      }
    },
    {
      "id": "634fa473d3061fe5e4e88d35",
      "author_id": "516f989a6d38277306ae8c1b",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>继 2019 年开源 Midway 框架之后，阿里一直在 Node.js 的前沿进行深度研究，除了加入 TC39 参与标准化建设，向上游 Node.js 项目持续贡献，与龙蜥社区合作优化之外，也在 Serverless 领域有了不小的成果。</p>\n<p>今天，向大家介绍我们最新的面向云原生场景，面向 Serverless 架构下的新产品， 代号 <strong>Noslate</strong>。</p>\n<h2>Noslate 是什么？</h2>\n<p>欢迎访问项目了解更多内容：<a href=\"https://github.com/noslate-project/noslate\">Noslate</a>\n<img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01hh1Db41sqh60CiNhD_!!6000000005818-2-tps-1324-390.png\" alt=\"Noslate\">\nJavaScript 是开发者数量最庞大的编程语言，早些年 Node.js 等技术的出现，让 JavaScript 可以轻松地处理各类服务端任务。</p>\n<p>但随着云原生/Serverless 等新架构概念的引导，弹性效率成为了全新的架构设计目标。为了能够让 JavaScript 任务拥有更高的弹性效率，进而满足在泛终端、全栈交付等领域的效率期待。我们逐步深入探索的过程中逐渐形成了 Noslate Project，旨在提升云原生场景下 JavaScript 的被调度性能，解决诊断性黑盒问题。</p>\n<p>Noslate 它主要由三个子项目组成，分别体现了我们在提升 Javascript 任务弹性效率过程中碰到的问题以及解决方式：</p>\n<ol>\n<li>Node.js Distribution：初期针对函数计算冷启动场景优化，降低 Node.js 用户代码加载耗时，形成了针对性的 Node.js 发行版本。</li>\n<li>Noslate Workers：随着探索的深入，我们设计了面向轻量端云同构场景的 W3C Web-interoperable JavaScript 轻量化容器方案。在交付灵活度上和资源、执行效率上形成平衡，现在主要应用于中心化的 SSR 渲染等轻量任务场景，效果显著。</li>\n<li>Noslate Debugger：在落地业务过程中，我们发现在弹性效率提升后，对于异常和崩溃变得难以定位，得益于 Linux 系统 Coredump 机制的启发，我们设计了基于 Corefile 对问题进行离线诊断的 Noslate Debugger 产品，帮助用户实现问题的回溯和实时定位。</li>\n</ol>\n<p>简而言之，Noslate 目标是通过提供完整的技术产品方案， 将 JavaScript 打造成云原生时代最灵活的交付语言。</p>\n<h2>为什么开源？</h2>\n<p>一方面我们希望通过开源加强项目产品化程度；另一方面希望在社区中吸收更多的实践场景进而继续完善产品设计，也欢迎大家参与到项目中来。\n同时，依托阿里云龙蜥社区和 Anolis 操作系统的合作关系，我们得以在底层探索，实现技术的演进。</p>\n<h3>一、Noslate Workers</h3>\n<p><img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01L6QLHh1NRjQD5l5PE_!!6000000001567-2-tps-1270-339.png\" alt=\"Noslate Workers\">\nW3C Web-interoperable 运行时 Aworker，提供了一个轻量，近乎 0 冷启动的 JavaScript Serverless 运行环境。通过它，可以轻松的在已有的架构中集成轻量化类 Serverless 的能力。\n<img src=\"https://gw.alicdn.com/imgextra/i2/O1CN015XmQ8e20OlsVamGdC_!!6000000006840-2-tps-1729-672.png\" alt=\"Noslate Workers 架构\">\n与传统的 FaaS 架构不同，这是一个在普通应用容器之上的轻量任务单位。得益于良好的动态任务高密度混部和隔离特性、以及基于任务状态拷贝 API 带来的近乎 0 冷启动特性，可以实现任务的即用即启与即停即抛，进而无需关心在整个大集群中任务节点的编排问题。\n与既有架构的关系：\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01hwla1u1WSUch3qhT0_!!6000000002787-0-tps-3337-1879.jpg\" alt=\"弹性架构分层\">\nNoslate Workers 由两个主要组件组成：</p>\n<ol>\n<li>Aworker - 轻量、Web-interoperable JavaScript Runtime</li>\n<li>Noslated - Serverless 化的 Aworker 调度管控实现</li>\n</ol>\n<h4>关于 Aworker</h4>\n<p>提供 Web API 标准的 Web-interoperable JavaScript 运行时，适合不直接依赖系统接口的业务逻辑部署。 Aworker 实现了近似 <a href=\"https://www.w3.org/TR/service-workers/\">Service Worker API</a> 的规范，提供了基本的 <a href=\"https://www.w3.org/TR/service-workers/#fetchevent\">Request-Response</a> 服务 API。\n因为提供了相比于 Node.js 的 API 更加高层次、抽象的定义，不会泄漏系统底层状态，Aworker 通过 Startup Snapshot 和 Warmfork 能力， 实现了更快的水平及垂直扩容，能够在毫秒级启动并处理流量，具备更高的弹性效率。</p>\n<h5>亮点特性一、Warmfork</h5>\n<p>熟悉 Linux 系统编程的同学都知道 fork(2) 系统调用有几个优势：</p>\n<ol>\n<li>新进程可以继承母进程的当前状态，而无需从 main() 开始初始化；</li>\n<li>pcb、栈、内存页，页表都是纯内存复制，所以进程创建快 (&lt;1ms)；</li>\n<li>CopyOnWrite，新进程可以继承母进程的静态页表，可节省系统内存；</li>\n</ol>\n<p>对于 Node.js 来说，因为其无法在主线程持有所有多线程的状态 (如锁，信号量等)，所以 Node.js 进行 fork 的修改难度很大。其多线程设计主要 来源于 libuv 库和 V8 Platform Worker 线程：</p>\n<ol>\n<li>因部分 IO 操作存在同步调用，如 dns，文件读写等，所以 libuv 使用 IO 线程将同步操作转换成异步操作；</li>\n<li>Node.js 的 V8 默认配置为多线程 GC、Background Compilation/Optimization 的方式；</li>\n</ol>\n<p>Node.js 的单进程多线程模型可以由下图表示：\n<img src=\"https://gw.alicdn.com/imgextra/i1/O1CN01f3vkhU1gZxESjIBhq_!!6000000004157-2-tps-767-267.png\" alt=\"Node.js 单进程多线程模型\">\nAworker 的设计是采用单进程单线程的模型，也就是将上述模型中的 worker thread 单独抽出放到一独立进程中。Worker 因此可支持 fork，从而避免从 main() 开始的启动消耗，达到快速启动的目的。\n<img src=\"https://gw.alicdn.com/imgextra/i1/O1CN01vaKK3b1NniQw29c7a_!!6000000001615-2-tps-734-266.png\" alt=\"Aworker 单进程单线程模型\">\n为了支持单线程，Aworker 还做了如下修改：</p>\n<ol>\n<li>使用了 Linux AIO 特性替掉了 libuv 中同步的文件系统操作（不是 POSIX AIO，两者有区别。Posix AIO 类似于 libuv 现有的实现）；</li>\n<li>使用 V8 的 SingleThread 模式，这是一个给低端设备（Low-end devices）实现的能力，不过非常符合 Serverless 资源模型；</li>\n</ol>\n<p>而为了管理、隔离这些工作进程，我们设计了一个轻量的业务进程容器管理组件 Turf ，该组件能通过 Warmfork 方式创建新的 Aworker 服务进程，并能提供一定的资源、环境的隔离能力，同时兼容 OCI。区别于传统 runc, rund 的容器，turf 旨在承载如 Aworker 这类轻 JS Runtime，它无需镜像运行，开销更低，可以支持更高的部署密度。</p>\n<p>Warmfork 具体的对比：\n<img src=\"https://gw.alicdn.com/imgextra/i2/O1CN01cLR5kd1JGVFa2tPic_!!6000000001001-2-tps-480-391.png\" alt=\"warmfork\">\n提供 “被复制” 的进程，称为 “种子进程”，其他服务进程都是该进程的克隆。譬如 Aworker 作为种子进程，它需要确定自己一个 “可被克隆” 的时间点，将自己的所在状态（内存）作为克隆进程的初始状态。</p>\n<p>Warmfork 的系统时序如下：\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01dTl9w71ZcW8TdBOon_!!6000000003215-2-tps-675-386.png\" alt=\"warmfork 时序\"></p>\n<h5>亮点特性二、Startup Snapshot</h5>\n<p>Warmfork 能实现了单机上服务进程的快速启动，而对于优化冷机启动加载速度，需要采用 Startup Snapshot 方案。\nStartup Snapshot 和 CodeCache 的区别在于 Startup Snapshot 能够保存用户代码逻辑执行状态，而 CodeCache 只保存代码解析结果、仍然需要重新执行 用户代码逻辑。</p>\n<p>设计上，Startup Snapshot 可提供携带用户代码逻辑的快速恢复，但是也有局限性：</p>\n<ol>\n<li>Startup Snapshot 对内存开销敏感，如果应用启动阶段用了大量内存，可能造成负优化；</li>\n<li>用户代码启动需要没有歧义的状态，比如 IP 地址、日期、连接状态、服务发现结果等，针对这些歧义内容用户代码需要在进程恢复时有修正能力；</li>\n</ol>\n<p>V8 的 Startup Snapshot Serializer 就是一个类似于 GC 的对象遍历器。这个遍历器通过遍历加入到 Snapshot 中的 Root 对象，遍历它所对应的对象图并按照对象关系生成一系列的反序列化指令。</p>\n<p>Startup Snapshot 相当于从 V8 Context 对象与它的 globalThis 开始，遍历堆中所有的对象并将对象关系与引用序列化成 特有的字节码，形成一个线性的可存储状态。并在恢复时，解释执行这些字节码，恢复堆中的对象内容与他们之间的引用关系。\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01VbTxVV1j7xsJEqEGB_!!6000000004502-2-tps-750-390.png\" alt=\"V8 对象\">\n上述的两类和被调度性能相关的特性被统一归类为状态拷贝 API，具体使用可以参考官网文档中的<a href=\"https://noslate.midwayjs.org/docs/noslate_workers/aworker/serialize-api\">《状态拷贝 API》</a>章节，详细介绍了命令行参数和程序内的 Events。</p>\n<h4>Noslated</h4>\n<p>Noslate Container Deamon，作为 Noslate Workers 解决方案的核心管控程序，提供了实例调度、弹性扩缩容、配置管理、流量管理等能力。</p>\n<p>基于健壮性考虑，它由两个角色组成：控制面（Control Plane）、数据面（Data Plane）\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01OGE8Xk1hEiU0mY4Nw_!!6000000004246-2-tps-2845-1351.png\" alt=\"Noslated 架构\">\nNoslated 对于实例的管控主要有三个模式：</p>\n<ol>\n<li>基础模式 - 基于流量的扩缩容</li>\n<li>即抛模式 - 运行完即销毁</li>\n<li>预留模式 - 面向历史场景兼容，在此不额外展开，详情可以查阅官网<a href=\"https://noslate.midwayjs.org/docs/noslate_workers/references/scale/#%E4%B8%89%E9%A2%84%E7%95%99%E7%AD%96%E7%95%A5\">【预留策略】</a>。</li>\n</ol>\n<h5>一、基础模式</h5>\n<p>当流量进入 Data Plane 后，如果没有能够处理请求的 Worker 实例，会通过 requestQueueing 事件通知 Control Plane，它会根据当前水位决定扩容数量，如果当前已无法创建 Worker 实例，会返回资源上限报错。新的 Worker 实例启动后，会自动连接到 Data Plane，Data Plane 发现新的 Worker 实例连接后会主动触发初始化请求，初始化成功后开始消费请求队列里堆积的请求。</p>\n<p>当 Worker 实例闲置一段时间后，Control Plane 会主动发起 GC 操作，告知 Data Plane 关闭流量，流量关闭后，Control Plane 会通知 Turf 关闭 Worker 实例，清理资源残留。\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01TWklUC1OusEnQ5ENK_!!6000000001766-2-tps-1207-1020.png\" alt=\"基础弹性模式\"></p>\n<h5>二、即抛模式</h5>\n<p>针对特定的灵活场景，一次性的轻量用户脚本执行（比如特别高密度的混部执行二方任务如 SSR），为了隔离不同请求间的上下文，可以针对每个请求创建一个实例，并在执行后销毁。\n<img src=\"https://gw.alicdn.com/imgextra/i3/O1CN01k7ZGMG1DHWQzoQWSV_!!6000000000191-2-tps-1207-1020.png\" alt=\"即抛模式\">\n在常规 Node.js 实例带上业务逻辑启动一般都不会太快，如果直接用于响应用户流量 RT 会难以接受。得益于 Aworker 运行时的 Warmfork 以及 Startup Snapshot 能力，把部分业务初始化逻辑放置到 Warmfrok 特性中，进而让新实例都是更快的启动并具备响应能力，这才让高密度混部二方任务成为可能。</p>\n<h2>二、Noslate Debugger</h2>\n<p><img src=\"https://gw.alicdn.com/imgextra/i1/O1CN010OWgpL1yU9IWuE5XG_!!6000000006581-2-tps-1270-339.png\" alt=\"Noslate Debugger\">\nNoslate Debugger 是针对 V8 应用的离线分析工具，它可以分析 Node.js 等应用程序产生的 Corefile (Core 文件)：</p>\n<ol>\n<li>检查 Node.js/V8 应用程序的结构体、堆栈等内容</li>\n<li>检查 V8 堆内的各种对象信息</li>\n<li>从 Corefile 中导出 Heap Snapshot</li>\n<li>业务无感获取 Corefile (通过 Arthur 工具)</li>\n<li>已支持 Node.js / AWorker LTS 官方发行版</li>\n</ol>\n<p>为了更好的解决问题而不是造轮子，在未来的几个月 Noslate Debugger 也会和国内社区 Node.js 稳定性领域优秀的开源软件 Easy Monitor 共建整合，在 Node.js/V8 的问题诊断领域形成合力，也是值得期待的事情。</p>\n<h5>优点一：基于 Corefile 的 “快照” 更适应 Serverless</h5>\n<p>Serverless 应用通常会使用大量生命周期短、规格小的任务实例，但在此类任务实例上获得调试诊断能力并不容易，这使得 Serverless 应用长期处于较为黑盒的窘境。比如，Inspector 需要稳定和长时的网络连接、运行时 Heap Snapshot 需要较多的计算和内存资源，都是和 Serverless 架构背道而驰的。</p>\n<p>不管是 V8 的对象还是堆快照，它都是 “信息” 在内存中的存储，而 Inspector 功能就是可以在 “运行时” 能提取这些信息。Noslate Debugger 通过 Corefile 将这部分调试诊断能力转移到了离线时进行，让原有实时性要求高的在线诊断调试转化为只需简单文件上传即可集成使用。</p>\n<p>在用户本地或云端服务上提供接近用户本地开发时的调试诊断体感：\n<img src=\"https://gw.alicdn.com/imgextra/i2/O1CN01OCIltT1LGcaAR4r8G_!!6000000001272-2-tps-861-519.png\" alt=\"调试流程\"></p>\n<blockquote>\n<p>Corefile (特指 GNU Corefile 格式) 主要记录的是 Node.js 进程的内存和寄存器转储(CoreDump: 内存到磁盘的过程)。所以它也是进程完整“信息”，被用于 Linux 系统应用 Crash(有损) 的调试载体，也可用于 GCore(无损) 产生进程快照用于离线分析。</p>\n</blockquote>\n<h5>优点二：更小的业务影响​</h5>\n<p>对比原有线上 “堆快照” 对业务的影响长达数分钟，到只影响业务 RT 秒级（通过 GCore），甚至只有几十毫秒 （通过 Arthur 工具）。Corefile 快照也不会有任何运行时的&quot;添油加醋&quot;，所以它也适合那些还未被GC的对象定位，譬如诊断已经结束了的业务处理等。</p>\n<p>Arthur 是 Noslate Debugger 中用于低影响获取 core文件的工具，利用 fork 减少进程暂停时间，LZ4 压缩减少转储体积。带业务流量的线上环境抓取，业务影响 31.106 毫秒，Corefile 大小为 338 MB （进程原使用 1.44GB 物理内存）。</p>\n<h2>三、Node.js 发行版</h2>\n<p><img src=\"https://gw.alicdn.com/imgextra/i1/O1CN01wxGn641fHLWa312QP_!!6000000003981-2-tps-1270-339.png\" alt=\"Anode\">\n我们还对 Node.js 的实例进行了定向弹性场景的优化，提高了用户代码的加载速度，从而降低了冷启动时间。主要包括 Require 关系加速、Bytecode Cache，优化效果提升可高达 100% ~ 200%。该发行版，同时包含来自阿里云基础软件团队在 ARM 架构的性能优化特性。</p>\n<h3>冷启动优化</h3>\n<p>PGO（Profile Guided Optimization），是一种根据运行时 Profiling Data 来进行编译优化的技术，这里我们借鉴了这一概念。主要是通过执行一遍之后收集启动阶段的热点数据生成缓存文件，后续通过内存映射直接加载高效的缓存文件，即可获得提升在 100% ~ 200% 的用户代码冷启动优化效果。\n<img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01nHx1UD1yE7Qqlfef6_!!6000000006546-2-tps-1164-930.png\" alt=\"PGO 流程\"></p>\n<h3>面向特定平台架构优化</h3>\n<p>Node.js 支持包括 x64、arm64 等在内的多种架构。 但针对 ARM 芯片的快速发展，上游版本往往仅提供基础适配，缺少针对新指令集的优化，导致在 ARM 芯片上无法获得潜在的性能提升。当下主流云厂商大都提供了 ARM 架构、高性价比的运行环境。 Noslate Node.js 发行版针对 ARM 等平台的优化可以让应用在这些架构上获得更高的性能和效率。\n目前 Noslate Node.js 发行版已经在进行针对阿里云 Ampere、阿里云倚天的定制优化，未来计划包括支持龙蜥社区中的其他架构。主要包括：zlib 特性优化、其他一些利用 SIMD 的性能提升都在 PR 合并和准别中。\n上面是对 Noslate Project 的简单介绍，如果想要详细了解可通过下述方式：\n● GitHub: <a href=\"https://github.com/noslate-project/noslate\">https://github.com/noslate-project/noslate </a>\n● 网站：<a href=\"https://noslate.midwayjs.org/\">https://noslate.midwayjs.org/</a>\n● 龙蜥社区 SIG（特殊兴趣小组，有钉钉群）：<a href=\"https://openanolis.cn/sig/web-platform\">https://openanolis.cn/sig/web-platform</a>\n● 邮件列表：noslate-support@list.alibaba-inc.com</p>\n<p>致谢\n感谢阿里巴巴集团内业务方的支持，同时还要特别感谢所有给本项目贡献过代码、一起探索过技术方向伙伴们（包括不限于 legendecas、mariodu、zhaolei0505、XadillaX、umuoy1、oraluben、hyj1991 等）。</p>\n</div>",
      "title": "阿里巴巴 Noslate 正式开源 - 面向云原生的 JavaScript 容器方案",
      "last_reply_at": "2023-01-03T08:20:08.069Z",
      "good": false,
      "top": true,
      "reply_count": 6,
      "visit_count": 176477,
      "create_at": "2022-10-19T07:17:07.977Z",
      "author": {
        "loginname": "mariodu",
        "avatar_url": "//gravatar.com/avatar/1cb272a2b4347c9a15b502ce7e4802ba?size=48"
      }
    },
    {
      "id": "5fdb44d70f99cb37f45e3410",
      "author_id": "56f3686f02c237a73a1a8acf",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>RT.</p>\n<p>请大家遵守法律法规，勿发布不合规内容。</p>\n<ul>\n<li>2021/11/26：针对部分打擦边球的推广行为（如各种云服务商的推广链接），将会对账户做出屏蔽处理。</li>\n<li>2021/11/26：针对机器人频繁发布广告与违规内容，新增发帖限制如下：新用户五天内不允许发帖（不影响回帖）。</li>\n</ul>\n</div>",
      "title": "【2021/11/26】请大家遵纪守法，勿发布不合规内容",
      "last_reply_at": "2022-12-24T08:11:16.749Z",
      "good": false,
      "top": true,
      "reply_count": 283,
      "visit_count": 231710,
      "create_at": "2020-12-17T11:45:27.667Z",
      "author": {
        "loginname": "thonatos",
        "avatar_url": "https://avatars.githubusercontent.com/u/958063?v=4&s=120"
      }
    },
    {
      "id": "61dbd8fd994582918ef7d174",
      "author_id": "54009f5ccd66f2eb37190485",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>很多人觉得Node.js没有往年那么火了，事实上不是这样的，Node.js社区健康稳步的发展中，主要是从性能好向好用转变，在易用性上有很大提升，从Node.js源码更新的内容看，大抵如此。Node.js Diagnostics Working Group是近二年Node.js社区的重点工作组，Node.js 14版本之后的大部分功能特性都是这个工作组推动的。早在2015年，有2个跟踪工作组tracing WG 和事后分析工作组 postmortem WG，在2017年合并到Diagnostics WG。核心产出是async_hooks, profiling, tracing, dump debug, report等，都是在易用性和好用性上做提升。让每个Node.js开发者更低门槛的提升Node.js应用的开发体验。</p>\n<p>秦粤老师在《浮华过后的Node.js》分享里，也表达了同样观点，他用的是产品化平缓期，也是健康稳步的发展的意思。</p>\n<p><img src=\"//static.cnodejs.org/FqRK1Uehhaz3lFDF3oHeL97Z7zYm\" alt=\"image.png\"></p>\n<p>社区方面，Web框架已经没有多少空间，以特性取胜的框架，应该不会很多，比较期待Egg3。像fastify这种，修改Node.js机制，在性能领域深耕的框架，目前看是比较有作为的。pnpm是有创新的，但代码是有点可读性不太好。我更加喜欢rushstack对menorepo的改进，大规模编程范式还需要探索。除了去年提的midway-hooks，easy-monitor，看起来remix和morden算新，但还没有超出之前的范畴。</p>\n<p>下面结合《<a href=\"https://nodersurvey.github.io/reporters\">Node.js开发者2021报告</a>》内容，我们详细解读一下Node.js 2021年的情况。这份解读是根据冰森&amp;狼叔直播内容整理的，要点如下。\n​</p>\n<h3>1）开发框架变化较大，造轮子变少，TS变多，使用企业级框架变多</h3>\n<p>​</p>\n<p>去年express占比还非常高，今年企业级框架变多，尤其是大而全的框架更受欢迎。</p>\n<p><img src=\"//static.cnodejs.org/Fl-QFKuag-dvFGbx7Q45WabMH5d8\" alt=\"image.png\"></p>\n<p>Egg在国内普及率很高，而Midway和Nest增长较快，其实和TS普及有一定关系。\n​\n<img src=\"//static.cnodejs.org/FvoNa6PGZJN1ZaqZlmXZuRnNUI5_\" alt=\"image.png\">\n​</p>\n<h3>2）版本更新变化较大，从Node 12升级到Node 14，升级比较积极</h3>\n<p>​</p>\n<p>去年Node.js主要是使用Node 12，2021年Node 14占比将近一半，更新还是较快的。</p>\n<p><img src=\"//static.cnodejs.org/FpQcq4qzd9rl-R-VEXzLZAiVMPaa\" alt=\"image.png\">\n​</p>\n<h3>3）吐槽变多，意味着用的人变多，趋于成熟</h3>\n<p>​</p>\n<p>C++之父Bjarne Stroustrup说过：世界上只有两种编程语言,一种是整天被人骂的,还有一种是没人用的。\n​</p>\n<p>大家对Node.js吐槽变多，实际上是在应用场景上使用较多，不再是针对于某些特性而进行吹捧。回归理性，在真实应用场景上，分布广泛，核心围绕API和BFF层，CLI&amp;工具。\n​\n<img src=\"//static.cnodejs.org/FkEeeI7hvEdSMIyUNaKxnQx9pzcJ\" alt=\"image.png\"></p>\n<h3>4）出圈：年龄分布较去年比变大，使用工种也变得比较丰富。</h3>\n<p>除了应用场景上，分布广泛外，非前端意外的开发者相关角色也有很大比例的提升，比如架构师，技术总监，项目经理等都一定程度上使用Node.js。可以说Node.js走出了前端圈，面向更大群体提供服务。另外受访者的年龄分布也变大了，这和出圈是有直接关系的。\n​\n<img src=\"//static.cnodejs.org/FsnHAf1Map8P8i4bEAn89POQf_8E\" alt=\"image.png\"></p>\n<h3>5）使用困惑：性能优化，内存泄漏以及npm依赖</h3>\n<p>​</p>\n<p>以往对Node.js困惑最多的是异步流程控制，随着async/await的普及，这个问题已经慢慢在弱化。随着开发者使用Node.js深度增加，对性能优化，内存泄漏更为关注，这也是比较容易理解的。</p>\n<p><img src=\"//static.cnodejs.org/FkPiwL5U9kbNq1vUE1J8AQKn54z4\" alt=\"image.png\"></p>\n<p>​</p>\n<h3>6）未来：从业经验越高则越关注性能和 Serverless</h3>\n<p>​</p>\n<p>关注性能比较容易理解，关注Serverless最主要是的原因是Serverless可以做到低运维甚至是0运维。运维作为Node.js开发者必备技能，Serverless的出现使得很多非专业Node.js也能轻松搞定Node.js各种服务端场景。</p>\n<p><img src=\"//static.cnodejs.org/FjZSOZ1uO-Tqh8yTL2E4CtvMUFbN\" alt=\"image.png\"></p>\n<p><img src=\"//static.cnodejs.org/FshPaWkMvnMKMxJckqf0L-M5OYe1\" alt=\"image.png\"></p>\n<h3>推荐阅读</h3>\n<ul>\n<li>天猪《EggJS 的前世今生与未来》，比较期待Egg3，easy-monitor作者一君也加入Egg3项目组了 <a href=\"https://www.yuque.com/atian25/blog/egg-1to2to3\">https://www.yuque.com/atian25/blog/egg-1to2to3</a></li>\n<li>秦粤 《浮华过后的Node.js》链接稍后给出来</li>\n</ul>\n<h3>参考</h3>\n<ul>\n<li>原文  <a href=\"https://cnodejs.org/topic/6108bbc2a5d29d175c2d4208\">https://cnodejs.org/topic/6108bbc2a5d29d175c2d4208</a></li>\n<li>报告 <a href=\"https://nodersurvey.github.io/reporters\">https://nodersurvey.github.io/reporters</a></li>\n</ul>\n<p>如果大家想参与讨论，欢迎回复</p>\n</div>",
      "title": "Node.js 2021年开发者报告解读：健康稳步的发展中",
      "last_reply_at": "2022-11-08T14:07:10.512Z",
      "good": false,
      "top": true,
      "reply_count": 19,
      "visit_count": 244411,
      "create_at": "2022-01-10T06:58:05.059Z",
      "author": {
        "loginname": "i5ting",
        "avatar_url": "https://avatars.githubusercontent.com/u/3118295?v=4&s=120"
      }
    },
    {
      "id": "650cfeac1a7c3db18b05e385",
      "author_id": "58cd535fdf7ceac916b44358",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h2>关于ts褒贬不一</h2>\n<p>rails作者放弃用ts</p>\n<p><img src=\"//static.cnodejs.org/FvKnKYQA1ZueshHRvt4an7An4GGW\" alt=\"image.png\"></p>\n<p>很多库作者支持ts\n<img src=\"//static.cnodejs.org/Fi2rJWiqHG-k6ubuSi-WpLCAttkI\" alt=\"image.png\"></p>\n<p>中庸，比如老道</p>\n<p><img src=\"//static.cnodejs.org/FiWqSNkyiIqmUxrvUPyXq8L95NdF\" alt=\"image.png\"></p>\n<p>你呢？</p>\n<p><img src=\"//static.cnodejs.org/FofiIjIc-PC7KrPaZd-H3HgrhoVX\" alt=\"image.png\"></p>\n<p>从我看了，喜欢ts的人会喜欢的不得了，不喜欢ts的也会嗤之以鼻。\n但历史的车轮一定是向前行驶的。</p>\n<h2>关于使用ts开发Node.js</h2>\n<ul>\n<li>调试是个问题</li>\n<li>用好更难，比如类型，测试，发布都会造成很多困难</li>\n<li>技术选型，从tsc、ts-node会有一系列的问题</li>\n<li>很多概念傻傻搞不清，tsc、tsd、tsx、tsup</li>\n<li>如何采用Node v20的test runner测试</li>\n</ul>\n<p>想做一个《从0开始使用ts开发Node.js标准项目》的视频课程，解决上面的问题，请问大家有需求吗？</p>\n</div>",
      "title": "大家有没有学习用ts开发node.js的诉求？",
      "last_reply_at": "2023-10-19T03:12:27.380Z",
      "good": false,
      "top": false,
      "reply_count": 5,
      "visit_count": 904,
      "create_at": "2023-09-22T02:40:44.309Z",
      "author": {
        "loginname": "npmstudy",
        "avatar_url": "https://avatars.githubusercontent.com/u/26357769?v=4&s=120"
      }
    },
    {
      "id": "6512a4bc1a7c3d730b05e4ec",
      "author_id": "60460ff34655eaadc021a4db",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>npm 上的 Express.js 的最新版本是 4.18.2，是一年前发布的。作为最流行的 Node.js 框架之一，Express.js 居然一年内都没有发布新版本。\n因为我的 <a href=\"https://tonzhon.com\">铜钟</a> 用的是 Express.js, 所以我很关心 Express.js 是否还值得继续投入。</p>\n</div>",
      "title": "为啥 Express.js 常年不更新？而且官网也那么拉跨？",
      "last_reply_at": "2023-10-18T06:56:29.504Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 976,
      "create_at": "2023-09-26T09:30:36.111Z",
      "author": {
        "loginname": "enzeberg",
        "avatar_url": "https://avatars.githubusercontent.com/u/18072932?v=4&s=120"
      }
    },
    {
      "id": "64f5f58c75a2d7b14e1ac5e3",
      "author_id": "5d47c83b4f472f7fee152927",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>如下代码：</p>\n<pre class=\"prettyprint language- js\"><code>const http = require(&#x27;http&#x27;)\n\nhttp.createServer((req, res) =&gt; {\n  console.log(&#x27;hello&#x27;) &#x2F;&#x2F; 输出 hello\n  res.end(&#x27;success&#x27;)\n}).listen(80)\n</code></pre><p>如果请求体较大，我发现“输出 hello”那里，要等客户端上传完，才会执行。<br>\n那如果上传文件很大，内存是怎么受得了的？</p>\n<p>有没有一种方法，在收到请求的时候，就可以拿到 IncomingMessage，<br>\n因为它是一个 ReadableStream，可以边读边往硬盘写。</p>\n</div>",
      "title": "http.createServer 是在请求体接受完毕才执行 handle 吗？",
      "last_reply_at": "2023-10-16T01:32:42.517Z",
      "good": false,
      "top": false,
      "reply_count": 6,
      "visit_count": 1339,
      "create_at": "2023-09-04T15:19:40.967Z",
      "author": {
        "loginname": "daGaiGuanYu",
        "avatar_url": "https://avatars.githubusercontent.com/u/27003009?v=4&s=120"
      }
    },
    {
      "id": "652638bf343d713456617077",
      "author_id": "5807253a487e1e4578afb648",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>Teamlinker是一个集成了不同功能和模块的团队协作平台。你可以联系你的团队成员，分配你的任务，开始一个会议，安排各项事务，管理你的文件等。并且支持线下免费部署，功能和线上版本一致。</p>\n<p><a href=\"https://team-linker.com/\">主页</a></p>\n<p>对于很多公司来说，他们需要用一个工具来确定项目进度，再用一个工具和其他同事沟通，然后用另一个工具和客户开会，并且不同的工具需要不同的账号，每个工具的数据都是互相分开独立的。同时，这些工具的成本也不低。在当前经济衰退的大环境下，大家都需降本增效。如果一个工具，它可以提供基本且全面的协同办公需求和以及非常低廉的成本，那对企业来说再好不过，于是我创造了Teamlinker。</p>\n<p>Teamlinker是基于TeamOS系统开发的一种web操作系统。这种系统交互允许用户并行处理不同的工作。我们可以打开窗口和应用程序，交互就像Win和Mac等操作系统一样。</p>\n<p><strong>Teamlinker主要有六个功能:</strong></p>\n<p><strong>项目管理</strong>\n<img src=\"https://team-linker.com/assets/exampleProject1-19150440.png\" alt=\"Description\">\n<img src=\"https://team-linker.com/assets/exampleProject2-8937029f.png\" alt=\"Description\">\n<strong>文档管理</strong>\n<img src=\"https://team-linker.com/assets/exampleWiki1-fade1060.png\" alt=\"Description\">\n<strong>日历安排</strong>\n<img src=\"https://team-linker.com/assets/exampleCalendar1-c0bf9528.png\" alt=\"Description\">\n<strong>视频会议</strong>\n<img src=\"https://team-linker.com/assets/exampleMeeting1-0dc2e795.png\" alt=\"Description\">\n<strong>在线聊天</strong>\n<img src=\"https://team-linker.com/assets/exampleIM2-1c2642fb.png\" alt=\"Description\">\n<strong>网盘文件管理</strong>\n<img src=\"https://team-linker.com/assets/exampleFinder1-f3859e5c.png\" alt=\"Description\"></p>\n<p>这些功能之间都进行了整合，相互协作，尽可能的发挥团队的最大效率。</p>\n<p>在一定程度上来说，Teamlinker对标了国内的飞书，国外的jira+microsoft teams，但是又有许多不同：\n1.从技术上来说，Teamlinker允许你在同一个窗口下处理不同的事情，并且每个功能之间都做深度融合，上手就和你目前使用的操作系统一样简单，并且，因为基于桌面系统，可扩展性非常强，每个新功能都可以做成一个app形式发布\n2.从产品上说，大部分人应该都不太喜欢这些协作工具，因为他们都是向下管理，所以我做成了基于桌面的形式，是因为我想为这个工具增加更多的温度以及可能性，你可以定制自己的桌面，添加你想要的照片，整理你的便签等，让它不再是一个冷冰冰的工具，而是一个你一打开它就能感受到一些温暖的陪伴，如下图：\n<img src=\"https://f.vue2.net/images/2023/10/11/a078b0205fd9f735f764b0e6cb1ac3b1.png\" alt>\n3.从价格上来说，目前Teamlinker完全免费，支持离线的docker部署，你只需要一台服务器，就可以非常简单的搭建一套内网环境。</p>\n<p>同时，我也有计划将来在产品稳定后对Teamlinker全部代码进行开源，目前第一版，我已经对项目内的Editor，Calendar和Meeting组件都进行了开源，期望在扩大项目知名度的同时，也能为开源事业尽一丝绵薄之力。</p>\n<p><a href=\"https://github.com/Teamlinker/TLMeetingServer\">TLMeetingServer</a></p>\n<p><a href=\"https://github.com/Teamlinker/TLMeetingClient\">TLMeetingClient</a></p>\n<p><a href=\"https://github.com/Teamlinker/TLEditor\">TLEditor</a></p>\n<p><a href=\"https://github.com/Teamlinker/TLCalendar\">TLCalendar</a></p>\n<p><strong>计划</strong>\n1.目前人工智能正在开发中，我期望可以让繁琐的事务变得更简单，你需要告诉系统你想做什么，它就可以自动帮你完成，并且你对系统有任何不明白的地方它都可以帮你解答。\n2.添加更多的功能：比如微信，谷歌的第三方登录，文档分享，会议录屏，对文件在线编辑等。</p>\n<p>Teamlinker是由这些库和包构建的:\n前端: vue typescript arco-design-vue</p>\n<p>后端: node.js redis mysql rabbitmq mediasoup</p>\n<p><strong>关于作者：</strong>\n鄙人从事软件开发已有十余年，先后经历过多家大厂，也是DOClever的创始人：<a href=\"http://doclever.cn/\">DOClever</a>，对项目感兴趣的可以加qq群：920276103或者本人qq：395414574。\n说实话，这个项目经历了将近一年的开发时间，开发不易，如果各位有任何建议和批评，也期望不吝指出，本人甚是感激。</p>\n</div>",
      "title": "爆肝一年，发布新一代团队协作平台Teamlinker第一版",
      "last_reply_at": "2023-10-16T01:30:55.773Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 300,
      "create_at": "2023-10-11T05:55:11.892Z",
      "author": {
        "loginname": "sx1989827",
        "avatar_url": "https://avatars.githubusercontent.com/u/5820929?v=4&s=120"
      }
    },
    {
      "id": "648dbc9b56d98363599da2ca",
      "author_id": "59e6c301bcfcc03162f2ffc3",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>koa,egg内存泄露漏洞有人要吗？只给专业的，免费</p>\n</div>",
      "title": "发现koa  egg漏洞",
      "last_reply_at": "2023-10-12T17:24:01.439Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 2192,
      "create_at": "2023-06-17T14:00:59.824Z",
      "author": {
        "loginname": "spitWind",
        "avatar_url": "https://avatars.githubusercontent.com/u/18753430?v=4&s=120"
      }
    },
    {
      "id": "64d4cb6ded492ec5927c1b01",
      "author_id": "5cab188c7edd13064e05363f",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>如题，不限于独立的部署平台以及大型云服务商下的单独的子服务</p>\n</div>",
      "title": "nodejs 云部署平台大比拼！，大家贴出自己认为最好用的，nodejs大本营数据应该比较可信",
      "last_reply_at": "2023-10-12T17:03:11.198Z",
      "good": false,
      "top": false,
      "reply_count": 5,
      "visit_count": 1530,
      "create_at": "2023-08-10T11:35:09.932Z",
      "author": {
        "loginname": "ganshiqingyuan",
        "avatar_url": "https://avatars.githubusercontent.com/u/33950951?v=4&s=120"
      }
    },
    {
      "id": "6500817d76b34561107caac1",
      "author_id": "58cd535fdf7ceac916b44358",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><blockquote>\n<p>Matteo Collina是Platformatic.dev的CTO，同时他也是Node.js Stream主要负责人，著名的Fastify框架作者，mqtt，msgpack，pino等知名模块的作者。</p>\n</blockquote>\n<p>以下内容来自Matteo Collina的订阅邮件《My thoughts on Bun and other Adventures》</p>\n<p>大家好！</p>\n<p>我写这篇文章的时候正在飞往伦敦，在那里我将与我的联合创始人Luca Maraschi一起工作整整一周。自上次写作以来，发生了很多新闻。</p>\n<h2>Bun 1.0</h2>\n<p>Bun发布了1.0版本，我既兴奋又失望。我非常喜欢Jarred Sumner正在构建的Bun，但他们声称与Node.js兼容性的问题让我有些沮丧。根据我的经验，它并不能完全替代Node.js，很多内部细节也有所不同。这导致了许多随机问题，我的代码库被要求修复Bun不兼容性的问题，而人们试用它。我更希望他们等待更大程度地与生态系统兼容后再发布1.0版本。</p>\n<h2>为什么Bun比Node.js更快？</h2>\n<p>原因如下：</p>\n<ol>\n<li>Node.js没有预算，一个小团队维护npm。大多数投资都是在添加功能或更安全的东西上，而不是让东西更快。让东西更快并不会让任何人赚更多的钱；这有点像公地悲剧（公共财产的悲哀）。此外，云提供商（现在是真正赚钱的人）对提高任何东西的性能没有兴趣，因为这意味着他们的收入会减少。</li>\n<li>Bun不关心与npm生态系统的重大部分的向后兼容性。他们使事情变快，并正在努力保留向后兼容性：这就是构建快速软件的方法。相反，Node.js流程是围绕保护生态系统而建立的。我们知道如何使Node.js更快，但这样做会为最终用户带来很多摩擦。</li>\n<li>我相信开放标准和开放治理。运行时和基础设施更好（参见terraform的惨败）。拥有开放的治理意味着更广泛的决策过程，这使每个人都被听到，但这也需要更多的时间来做出决策。</li>\n</ol>\n<h2>Bun目前不支持Pino和Fastify</h2>\n<p>我写这篇文章时，Bun不支持Fastify或Pino。两者都是Node.js社区影响非常大模块，其中pino与Next.js一样受欢迎。Bun团队正在积极研究如何添加缺失的API和行为，我期望他们在未来几个月内追赶上来。鉴于有多少人要求支持，以下变体的消息最终出现在我的GitHub已保存回复中：</p>\n<blockquote>\n<p>最终，Bun并没有实现所有的Node.js API。尽管他们声称是干净的替代品，但它并不能完全替代Node.js。有关此类问题，请参阅Bun <a href=\"https://bun.sh/discord?utm_source=nodeland&amp;utm_medium=email&amp;utm_campaign=my-thoughts-on-bun\">Discord</a>或<a href=\"https://github.com/oven-sh/bun?utm_source=nodeland&amp;utm_medium=email&amp;utm_campaign=my-thoughts-on-bun\">Issue Tracker</a>。</p>\n</blockquote>\n<p>如果我的任何代码库在Bun上运行不良，请在Bun上报告错误。这也是<a href=\"https://x.com/jarredsumner/status/1700497869160268155?s=20&amp;utm_source=nodeland&amp;utm_medium=email&amp;utm_campaign=my-thoughts-on-bun\">Jarred要求每个人遵循的方法</a>。</p>\n<h2>Bun安装速度的代价</h2>\n<p>Bun最令人印象深刻的事情之一是bun install的性能。然而，它以开发人员体验为代价。npm、pnpm和yarn默认会检查是否有新版本可用，并从注册表中获取它。相反，bun会首先选择本地版本。实际上，pnpm --prefer-offline标志的行为与bun install大致相同，并且它们的性能相当：在我的系统上，分别为750ms和150ms（请参见Evan You的这条推文）。尽管这种差异很重要，但这两个数字是可比较的，希望差距会缩小。</p>\n<p>有趣的是，最终用户会如何评价这种行为上的差异。您会使用最新和最好的版本，还是使用已安装的本地版本，知道您可能会失去错误或安全修复？</p>\n<p>我也对在Mac OS X上聪明地使用写时复制印象深刻，使其几乎在热缓存下瞬间完成。这部分是由于clonefile，它告诉操作系统只在第一次修改文件时复制文件，节省了宝贵的时间。我希望所有其他JavaScript包管理器都能复制这种技术。</p>\n<h2>Node.js接下来会怎么样？</h2>\n<p>几年来，Node.js在改进运行时性能方面投入了非常少的资源。去年，Yagiz Nizipli启动了性能团队，现在它是一个战略性的倡议。这导致了相当多的重大性能改进，由Rafael Gonzaga在“Node.js性能状况2023”中描述。每次发布，Node.js都会变得更快，而没有大规模的破坏性变化。</p>\n<p>你想让Node.js变得更快吗？加入性能团队并做出贡献…或者找到一种资助Node.js开发的方式。</p>\n<p><img src=\"//static.cnodejs.org/FpMMG-aLdKxJn6mv0eH-m9mfqB2x\" alt=\"image.png\"></p>\n<p>扫码关注“NPM学习”，选择“星标”公众号</p>\n<p>重磅干货，第一时间送达！</p>\n</div>",
      "title": "Node.js社区知名领袖Matteo Collina关于Bun 1.0发布的一点想法",
      "last_reply_at": "2023-09-21T04:15:03.630Z",
      "good": false,
      "top": false,
      "reply_count": 3,
      "visit_count": 1133,
      "create_at": "2023-09-12T15:19:25.249Z",
      "author": {
        "loginname": "npmstudy",
        "avatar_url": "https://avatars.githubusercontent.com/u/26357769?v=4&s=120"
      }
    },
    {
      "id": "6502701e1a7c3de9fa05e1ac",
      "author_id": "545870576537f4d52c414eb6",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FgZYUTaEj-aSIZECe40vshFUl4yk\" alt=\"image.png\">\nNeuroDB aarch64版 成功部署到Android手机上，实现完美运行。\n从此图数据库不再是服务器端的专有服务，人人可以通过在自己手机上下载NeuroDB实现随身可携带的图数据库引擎。\n意义：NeuroDB图数据库可以嵌入到手机APP中实现账上图检索，因而可以为手机办公软件提供离线图检索功能</p>\n<ul>\n<li>部署环境：Android 13</li>\n<li>支持软件：Termux</li>\n<li>支持组件：termux专用的glibc （） <a href=\"http://pangguoming.com/blog/Linux/glibc-for-termux\">参考链接</a></li>\n</ul>\n<p>NeuroDB 官网： <a href=\"https://neurodb.org/\">neurodb.org</a></p>\n</div>",
      "title": "图数据引擎NeuroDB 成功部署到安卓手机上",
      "last_reply_at": "2023-09-14T02:29:50.078Z",
      "good": false,
      "top": false,
      "reply_count": 0,
      "visit_count": 544,
      "create_at": "2023-09-14T02:29:50.078Z",
      "author": {
        "loginname": "pangguoming",
        "avatar_url": "https://avatars.githubusercontent.com/u/7269202?v=4&s=120"
      }
    },
    {
      "id": "65011b0d76b345758d7caae4",
      "author_id": "5aba15c3a2f3b49869cb2da2",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>Node.js 使用 <code>officecrypto-tool</code> 读取加密的 Excel (xls, xlsx) 和 Word (doc, docx)文档 和 PPT (pptx), 还支持 xlsx 和 docx, pptx 文件的加密（具体使用看文档）。</p>\n<p>传送门：<a href=\"https://www.npmjs.com/package/officecrypto-tool\">officecrypto-tool</a></p>\n<p>读取加密的 Excel 示例</p>\n<pre class=\"prettyprint\"><code>一：xlsx-populate \n&#x2F;&#x2F; 只支持 xlsx， xlsx-populate  自带了解密功能，\n&#x2F;&#x2F; 不过只支持 ecma376 agile 模式，也就是Office 生成的加密的docx，\n&#x2F;&#x2F; WPS的就不行， WPS用的是 ecma376 standard 模式\nconst XlsxPopulate = require(&#x27;xlsx-populate&#x27;);\n(async ()=&gt;{\n    const input = await fs.readFile(&#96;pass_test.xlsx&#96;);\n    const output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    const workbook = await XlsxPopulate.fromDataAsync(output);\n\n    &#x2F;&#x2F; 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    }\n    const workbook = await XlsxPopulate.fromDataAsync(output);\n })()\n\n\n二：@zurmokeeper&#x2F;exceljs https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;@zurmokeeper&#x2F;exceljs\n\n&#x2F;&#x2F; 只支持 xlsx @zurmokeeper&#x2F;exceljs 直接内置了解密功能，完全兼容exceljs v4.3.0\nconst Excel = require(&#x27;@zurmokeeper&#x2F;exceljs&#x27;);\n(async ()=&gt;{\n    &#x2F;&#x2F; 从文件读取, 解密使用密码加密的excel文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.readFile(filename, {password:&#x27;123456&#x27;});\n\n    &#x2F;&#x2F; 从流读取, 解密使用密码加密的excel文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.read(stream, {password:&#x27;123456&#x27;});\n\n    &#x2F;&#x2F; 从 buffer 加载, 解密使用密码加密的excel文件\n    const workbook = new Excel.Workbook();\n    await workbook.xlsx.load(data, {password:&#x27;123456&#x27;});\n})()\n\n三：xlsx\n&#x2F;&#x2F; xlsx 支持 xls 和 xlsx\nconst XLSX = require(&#x27;xlsx&#x27;);\n(async ()=&gt;{\n    const input = await fs.readFile(&#96;pass_test.xlsx&#96;);\n    &#x2F;&#x2F; const input = await fs.readFile(&#96;pass_test.xls&#96;); &#x2F;&#x2F; 或者xls\n    const output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    const workbook = XLSX.read(output);\n\n    &#x2F;&#x2F; 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    }\n    const workbook = XLSX.read(output);\n})()\n\n四：node-xlsx\n&#x2F;&#x2F; 其实 node-xlsx 只是对xlsx 进行了封装，里面还是调用 xlsx 去解析的\nconst nodeXlsx = require(&#x27;node-xlsx&#x27;);\n(async ()=&gt;{\n    const input = await fs.readFile(&#96;pass_test.xlsx&#96;);\n    &#x2F;&#x2F; const input = await fs.readFile(&#96;pass_test.xls&#96;); &#x2F;&#x2F; 或者xls\n    const output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    const workbook = nodeXlsx.parse(output);\n\n    &#x2F;&#x2F; 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    }\n    const workbook = nodeXlsx.parse(output);\n})()\n</code></pre><p>读取加密的 Word 示例</p>\n<p>使用：<a href=\"https://www.npmjs.com/package/mammoth\">mammoth</a>  <a href=\"https://www.npmjs.com/package/officecrypto-tool\">officecrypto-tool</a></p>\n<pre class=\"prettyprint\"><code>const officeCrypto = require(&#x27;officecrypto-tool&#x27;);\nconst fs = require(&#x27;fs&#x27;).promises;\nconst mammoth = require(&#x27;mammoth&#x27;);\n(async ()=&gt;{\n    const input = await fs.readFile(&#96;pass_test.xlsx&#96;);\n    const output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    await mammoth.convertToHtml({buffer: output});\n\n    &#x2F;&#x2F; 或者可先判断文件是否是加密的\n    const isEncrypted = officeCrypto.isEncrypted(input);\n    let output = input;\n    if (isEncrypted) {\n        output = await officeCrypto.decrypt(input, {password: &#x27;123456&#x27;});\n    }\n    await mammoth.convertToHtml({buffer: output});\n})()\n</code></pre><p>使用其他的word读取库也是一样的道理，先使用 officecrypto-tool 解密以后再用对应的库去处理</p>\n</div>",
      "title": "Node.js 使用 `officecrypto-tool` 读取加密的 Excel 和 Word 文档",
      "last_reply_at": "2023-09-13T02:14:37.191Z",
      "good": false,
      "top": false,
      "reply_count": 0,
      "visit_count": 565,
      "create_at": "2023-09-13T02:14:37.191Z",
      "author": {
        "loginname": "zurmokeeper",
        "avatar_url": "https://avatars.githubusercontent.com/u/25943604?v=4&s=120"
      }
    },
    {
      "id": "64f7fd5a76b345020f7ca842",
      "author_id": "53248056ef9f9ce40901715e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>主要任务就是是对定义的一堆Model的CRUD，以及实现导入/导出Excel，然后有api丢给小程序去做前端界面，后续还会有一些统计图表的需求。\n研究了一下AdminJS，感觉基本可以实现，不知道会不会有大坑。\n不知道目前是否还有类似的成熟框架？</p>\n</div>",
      "title": "新手提问，如何能迅速完成一个后台系统",
      "last_reply_at": "2023-09-11T03:31:49.635Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 1053,
      "create_at": "2023-09-06T04:17:30.278Z",
      "author": {
        "loginname": "ravenwang",
        "avatar_url": "https://avatars.githubusercontent.com/u/366822?v=4&s=120"
      }
    },
    {
      "id": "5e86cfbc64259617c49a43c2",
      "author_id": "59a50205bc6d953708128944",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><ol>\n<li>杭州A公司，boss上自己面找的，政企服务的，远程笔试没过，认栽，教育同学，多刷题。再次感谢内推的朋友</li>\n<li>上海B公司，boss上面对方找的，不清楚具体做哪块的，上来先两个Promise开胃，卒，教育同学，多刷题，不然后面都没机会聊。再次感谢内推的朋友</li>\n<li>上海Find,    boss上面找的，技术太忙为理由发了个在线编程题，简单搞定，后来回复说得分为0，行，可能没按照hackerrank上面的规范来吧，大哥这是国内，hackerrank是求职国外用的多一点好吧，逼格太高告辞打搅了。就怕说英文要求高，一入职全中文。</li>\n<li>上海达观，  boss上面找的，一个滑动窗口的题目，还有一个排序的题轻松拿下，人事反馈全错，打搅了告辞。</li>\n<li>上海PPIO，不太记得题目了，属于抖机灵的题目，还有处理日志脚本，不清楚可能我是一个假的node开发</li>\n<li>上海知言，没啥技术含量，看了下看准网评论，拖欠薪资，终面CEO挂了，很自信的一位大叔，聊天像是审问，就差素质三连了，和我不太对味。</li>\n<li>上海掌门一对一，对方要求熟悉c++插件以及eletron，挂了正常</li>\n<li>杭州宇链科技有限公司，面试很水，聊不下去。</li>\n<li>上海搜书神器，面试没劲，都要睡着了。</li>\n<li>上海普华永道，对英文有点要求，终面估计待遇问题挂了，结果还没出来，虽然我排斥996，但是也要恰饭的啊。</li>\n<li>上海XX公司，技术和CEO都对味，最关键疫情不受影响。</li>\n</ol>\n<p>上个图片分享一波\n<img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdgjbk4vmsj30oh0jmgx6.jpg\" alt=\"281585891598_.pic_hd\"></p>\n</div>",
      "title": "分享一波近期找工作的经历，尽量按着时间顺序来。",
      "last_reply_at": "2023-09-08T03:54:59.912Z",
      "good": false,
      "top": false,
      "reply_count": 28,
      "visit_count": 8513,
      "create_at": "2020-04-03T05:55:08.340Z",
      "author": {
        "loginname": "jxycbjhc",
        "avatar_url": "https://avatars.githubusercontent.com/u/16661897?v=4&s=120"
      }
    },
    {
      "id": "64f7064d76b34520247ca7fc",
      "author_id": "5d47c83b4f472f7fee152927",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><ul>\n<li><a href=\"https://bridge.ppz.xn--6qq986b3xl/\">试用地址</a> （做了流量限制，最大传输文件为 10Mb，因为流量太贵了。。。）</li>\n<li><a href=\"https://github.com/ppz-pro/file-bridge\">源码地址</a></li>\n</ul>\n<p>只使用 Node.js 原生 api，500 行代码。</p>\n</div>",
      "title": "写了个好玩的项目，“文件桥”：网页里的文件服务器",
      "last_reply_at": "2023-09-07T05:59:46.596Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 794,
      "create_at": "2023-09-05T10:43:25.121Z",
      "author": {
        "loginname": "daGaiGuanYu",
        "avatar_url": "https://avatars.githubusercontent.com/u/27003009?v=4&s=120"
      }
    },
    {
      "id": "64f5501b75a2d730e21ac55a",
      "author_id": "4efc278525fa69ac69000141",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>连接的 Redis 数据库切换到了 cluster mode, 跟着切换了, 结果后来遇到了 <code>redis.scan is not a function</code> 的报错… 用 inspector 看了结果好像直接没提供这个函数,\n<img src=\"//static.cnodejs.org/FgIZEI_ZD_5jYDhYR5hXbtZBvUhA\" alt=\"image.png\">\n<a href=\"https://github.com/redis/node-redis/blob/294cbf8367295ac81cbe51ce2932493ab80493f1/packages/client/lib/cluster/commands.ts#L343\">https://github.com/redis/node-redis/blob/294cbf8367295ac81cbe51ce2932493ab80493f1/packages/client/lib/cluster/commands.ts#L343</a></p>\n<p>有人遇到过这个情况吗, 有没有解法?\n原始的问题是我想通过 scan 拿到一下固定前缀的 keys 然后进行清除, <code>KEYS</code> 因为性能问题是不让用的, 现在 scan 也用不了, 都不好查删除那些 keys 了.</p>\n</div>",
      "title": "有人遇到过 Redis cluster mode 下 redis.scan is not a function 的问题吗",
      "last_reply_at": "2023-09-07T02:16:43.511Z",
      "good": false,
      "top": false,
      "reply_count": 2,
      "visit_count": 683,
      "create_at": "2023-09-04T03:33:47.856Z",
      "author": {
        "loginname": "jiyinyiyong",
        "avatar_url": "https://avatars.githubusercontent.com/u/449224?v=4&s=120"
      }
    },
    {
      "id": "643792746779ea384914db2f",
      "author_id": "60460ff34655eaadc021a4db",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/Fg5rNitzL2mSiYAzDadW9o9XIvTy\" alt=\"index.JPG\">\n<em>首页 (引入侧边栏，全局显示用户的歌单列表)</em></p>\n<p><img src=\"//static.cnodejs.org/Fg3V7-Y2Zr6MBKD_t0WG1kIic-6I\" alt=\"搜索薛之谦.JPG\">\n<em>搜索&quot;薛之谦&quot;</em></p>\n<p><img src=\"//static.cnodejs.org/Fk9wkSI6nS73Jo4jwfjaorlGqy7h\" alt=\"搜索巴赫旧约.JPG\">\n<em>搜索&quot;巴赫旧约&quot;</em></p>\n<p><img src=\"//static.cnodejs.org/FnJo-Q2Yp71yR7fmmBtqxx5F0paD\" alt=\"导入狂飙.JPG\">\n<em>导入专辑 《狂飙》OST</em></p>\n<p><img src=\"//static.cnodejs.org/FkcB-uAPkV_FE8Dy6ZiVAn1507WW\" alt=\"歌词_播放列表.JPG\">\n<em>歌词 &amp; 播放列表</em></p>\n<p><img src=\"//static.cnodejs.org/FonR7rUdeZAlmb90OQdarKF2Ii-8\" alt=\"artists.png\">\n<em>Artists</em></p>\n<p><strong><a href=\"https://tonzhon.com\">https://tonzhon.com</a></strong>\nGitHub: <a href=\"https://github.com/enzeberg/tonzhon-music\">https://github.com/enzeberg/tonzhon-music</a></p>\n<p>这个音乐 Web App 现在用上了 <strong>侧边栏</strong>，专门显示用户的歌单列表，并使其保持全局显示，从而强调用户自身的重要性，弱化环境的重要性。“一切以用户为中心”是它的宗旨。</p>\n<p>它还把灰色背景改成了白色，把白色卡片改成了灰色线框 (有些左侧边框用上了其他颜色，便于用户区分不同的卡片)…</p>\n<p>期待大家的建议~</p>\n</div>",
      "title": "这个可以免费听歌的 web app，上线了全新的 UI 和 功能...",
      "last_reply_at": "2023-09-04T07:01:13.819Z",
      "good": false,
      "top": false,
      "reply_count": 12,
      "visit_count": 4563,
      "create_at": "2023-04-13T05:26:12.759Z",
      "author": {
        "loginname": "enzeberg",
        "avatar_url": "https://avatars.githubusercontent.com/u/18072932?v=4&s=120"
      }
    },
    {
      "id": "64d39260ed492e64177c1a75",
      "author_id": "550973933135610a365b01fa",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FovlKXFL9XulzNYmCQP5okegiz9y\" alt=\"image.png\"></p>\n<h2>前言</h2>\n<p>欢迎了解和关注<a href=\"https://github.com/tnfe/limu\">limu</a>，访问<a href=\"https://tnfe.github.io/limu/\">文档</a>并点击右键调出控制台后可<strong>实时体验</strong> limu api 和 immer api做对比（全局已绑定limu和immer对象）。</p>\n<p>接下来让我们一起深入了解limu的诞生历程吧 ^_^</p>\n<h2>不可变数据的现状</h2>\n<p>不可变数据由于拥有<strong>结构共享</strong>的特性，让一些严重依赖浅比较的框架快速获得性能收益（如react），同时也让一些需要使用严格不可变数据的场景避免了深克隆带来的冗余性能开销，而当下除了immutablejs 和 immer 这两款非常流行的工具库之外，有没有一款比它们的性能和易用性都更好的不可变数据工具库呢？在回答此问题之前，我们先看下<code>immutablejs</code>和<code>immer</code>陷入的困境。</p>\n<p><code>immutablejs</code>作为一个先驱者，最早的git提交记录可以追溯到2014年4月，伴随着<code>react</code>的不可变状态编程理念在2015年之后开始越来越走红，现已达到30K+ star数量，它在js语言世界里拥有为不可变数据指引方向般的重要地位，带领大家认识到了不可变数据在某些特定编程领域的重要性。</p>\n<p>不过它的问题也比较突出，主要归结为2点</p>\n<ul>\n<li>1 api 复杂，与原始js操作处理隔离的状态，有很重的学习成本和记忆负担</li>\n<li>2 内建了一套自己的数据结构，需要通过<code>fromJs</code>和<code>toJs</code>做普通json和不可变数据直接的相互转换，带来了额外的开销。</li>\n</ul>\n<pre class=\"prettyprint language-ts\"><code>&#x2F;&#x2F; 额外的学习成本和记忆负担\nimmutableA = Immutable.fromJS([0, 0, [1, 2]]);\nimmutableB = immutableA.set 1, 1;\nimmutableC = immutableB.update 1, (x) -&gt; x + 1;\nimmutableC = immutableB.updateIn [2, 1], (x) -&gt; x + 1;\n</code></pre><p>而 2018诞生的 <code>immer</code> 则完美的解决了以上两点问题，它巧妙的使用<code>Proxy</code>代理了原始数据，让用户可以像原始js一样完成所有不可变数据的操作（不支持的环境自动降级为 defineProperty），这样一来用户没有了任何学习成本和记忆负担.</p>\n<pre class=\"prettyprint language-ts\"><code>const { produce } = limu;\nconst baseState = {\n  a: 1,\n  b: [ 1, 2, 3 ],\n  c: {\n    c1: { n: 1 },\n    c2: { m: 2 },\n  }\n};\n&#x2F;&#x2F; 像原始js一样丝滑的操作不可变数据\nconst nextState = produce(baseState, (draft)=&gt;{\n  draft.a = 2;\n  draft.b[&#x27;2&#x27;] = 100;\n});\n\nconsole.log(nextState === baseState); &#x2F;&#x2F; false\nconsole.log(nextState.a === baseState.a); &#x2F;&#x2F; false\nconsole.log(nextState.b === baseState.b); &#x2F;&#x2F; false\nconsole.log(nextState.c === baseState.c); &#x2F;&#x2F; true\n</code></pre><p>但<code>immer</code>真的就是终极答案了么，在大数组和深层次对象场景<code>immer</code>的性能问题较为突出，见此<a href=\"https://github.com/immerjs/immer/issues/867\">问题</a>描述，社区开始有不少作者另起炉灶尝试突破，留意到这里面较为突出的有<a href=\"https://github.com/GiuseppeRaso/structura.js\">structura</a>和<a href=\"https://github.com/unadlib/mutative\">mutative</a>，经我实测发现确实如它们所说的快过immer较多倍，但依然未能解决既要<strong>速度快</strong>又要<strong>开发体验好</strong>的问题，这两个问题我将在下面一一具体意义剖析。</p>\n<h2>limu诞生</h2>\n<p>在2021年底我开始为状态库<a href=\"https://github.com/heluxjs/helux/tree/concent-v2\">concent</a>构思v3版本，其中一个重点是支持深度依赖收集（v2只支持收集状态的第一层读依赖），那么就需要深度使用<code>Proxy</code>来完成此动作，在深度使用<code>immer</code>是发现调试模式下查看草稿非常糟心，需要借助<code>JSON.parse(JSON.stringify(draft))</code>来完成，尽管后来发现<code>current</code>接口可以导出草稿副本并查看数据结构，但漫天插入额外的<code>current</code>然后在编译时擦除真的让我比较烦恼，且<code>current</code>本身也有不小的开销，再加上通过issue发现<code>immer</code>的如下类似的性能问题后</p>\n<pre class=\"prettyprint\"><code>const demo = { info: Array.from(Array(10000).keys()) };\nproduce(demo, (draft) =&gt; {\n  draft.info[2000] = 0; &#x2F;&#x2F; take long time\n});\n</code></pre><p>开始尝试设计并实现<code>limu</code>，期望保持像<code>immer</code>一样的api，但能够更快且更好用，于是在经历经过无数个小迭代后，摸索出了一些提速关键技巧（下面将会介绍到），解决了内存泄露问题，并达成了保证质量的两个关键点：</p>\n<ul>\n<li>跑通了 <strong>370+</strong>  测试用例</li>\n</ul>\n<p><img src=\"//static.cnodejs.org/FreDqJnJUS3zV8lTmi-IaJ9_XN_s\" alt=\"image.png\"></p>\n<ul>\n<li>测试覆盖率到达了<code>97%</code></li>\n</ul>\n<p><img src=\"//static.cnodejs.org/FogT7R_1XyxFiKBvNoJ5pyWpTcBy\" alt=\"image.png\"></p>\n<p>同时也让性能和易用性均达到我的理想后，终于可以正式宣布<strong>稳定版</strong>发布，且已开始作为基础组件服务于<a href=\"https://new.qq.com/\">新闻门户</a>，接下来将重点介绍limu的3大优势。</p>\n<h2>更快</h2>\n<p><img src=\"//static.cnodejs.org/FnU4AUtoUUPdibKP9pxIcBJqI0Oa\" alt=\"image.png\"></p>\n<p>区别于<code>immer</code>的写时复制机制，<code>limu</code>采用<strong>读时浅克隆写时标记修改</strong>机制，具体操作流程我们将以下图为例来讲解，使用<code>produce</code>接口生成草稿数据后，<code>limu</code>只会对草稿数据读取路径上经过的相关数据节点做浅克隆</p>\n<p><img src=\"//static.cnodejs.org/FiERwyNg7HkfqsyTUB2HCfXSC1m9\" alt=\"image.png\"></p>\n<p>修改了目标节点下的值的时候，则会回溯该节点到跟节点的所有途径节点并标记这些节点为已修改</p>\n<p><img src=\"//static.cnodejs.org/FlOaAGwANGukE4dhDSqX-ucX5k_J\" alt=\"image.png\"></p>\n<p>最后结束草稿生成<code>final</code>对象时，<code>limu</code>只需要从根节点把所有标记修改的节点的副本替换到对应位置即可，没有标记修改的节点则不使用副本（注：生成副本不代表已被修改）</p>\n<p>这样的机制在对象的原始层级关系较为复杂且修改路径不广的场景下，且不需要冻结原始对象时，性能表现异常优异，可达到比 immer 快 5 倍或更多，只有在修改数据逐渐遍及整个对象所有节点时，<code>limu</code>的性能才会呈线性下载趋势，逐步接近<code>immer</code>，但也要比<code>immer</code>快很多。</p>\n<h3>测试验证</h3>\n<p>为验证上述结论，用户可按照以下流程获得针对<code>limu</code>与<code>immer</code>性能测试对比数据</p>\n<pre class=\"prettyprint language-bash\"><code>git clone https:&#x2F;&#x2F;github.com&#x2F;tnfe&#x2F;limu\ncd limu\nnpm i\ncd benchmark\nnpm i\nnode opBigData.js &#x2F;&#x2F; 触发测试执行，控制台回显结果\n# or\nnode caseReadWrite.js\n</code></pre><p>我们准备两个用例，一个改编自 immer 官方的性能测试<a href=\"https://github.com/tnfe/limu/blob/main/benchmark/opBigData.js\">案例</a>（注：跳转后见头部标注的链接）</p>\n<p>执行 <code>node opBigData.js</code> 得到如下结果 (柱条越短代表越快)</p>\n<p><img src=\"//static.cnodejs.org/Fk03l9XNS3zTFVd390F86zWfklDi\" alt=\"image.png\"></p>\n<blockquote>\n<p>注：以上是v9版本，immer 23年4月发布了v10版本，经测试发现结果变化不大，性能提升不明显</p>\n</blockquote>\n<p>一个是我们自己准备的深层次 json 读写案例，结果如下 (柱条越短代表越快)</p>\n<p><img src=\"//static.cnodejs.org/FvZ_GDLmDrJL145SQWPWTt5HXmwv\" alt=\"image.png\"></p>\n<blockquote>\n<p>可通过注入<code>ST</code>值调整不同的测试策略，例如 <code>ST=1 node caseReadWrite.js</code>，不注入时默认为 <code>1</code></p>\n<ul>\n<li>ST=1，关闭冻结，不操作数组</li>\n<li>ST=2，关闭冻结，操作数组</li>\n<li>ST=3，开启冻结，不操作数组</li>\n<li>ST=4，开启冻结，操作数组</li>\n</ul>\n</blockquote>\n<h2>更强</h2>\n<p><img src=\"//static.cnodejs.org/Fn_Gy-1zt0ubBV4Hp-DPAT6ciB-U\" alt=\"image.png\"></p>\n<p><code>limu</code>利用<code>Symbol</code>和原型链隐藏代理元数据，让元数据始终跟随草稿节点，在草稿结束后才擦除，让用户不仅可以像操作原生js一样操作不可变数据，还能像查看原生json一样查看草稿数据（仅需展开一层代理即可），且始终让用用户对草稿的修改数据实时同步到可查看节点上，极大的提高了调试体验。</p>\n<p>这里我们将分别列举<code>limu</code>、<code>immer</code>、<code>mutative</code>、<code>structura</code>在调试状态下对草稿展开的图示：</p>\n<ul>\n<li>\n<p>limu 可任意查看草稿所有节点，且数据始终同步为修改后的数据</p>\n<p><img src=\"//static.cnodejs.org/FtCfyeU2RdQ-JdGKkJcAuMykEfl4\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>structura 可查看草稿的原始结构，但草稿数据是过期的（注：但log的数据是正确的）</p>\n<p><img src=\"//static.cnodejs.org/Fl1114zweuuKjSt6NJEIvN3q3yqH\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>mutative 保持了和immer类似的结构，无法快速查看</p>\n<p><img src=\"//static.cnodejs.org/FlwhOOHmQu6QQ0vhL8hoQ83uQrk9\" alt=\"image.png\"></p>\n</li>\n<li>\n<p>immer 利用Proxy层层代理，无法快速查看</p>\n<p><img src=\"//static.cnodejs.org/Fm4aWWyjrarDCzgqTOF-PDZQShg6\" alt=\"image.png\"></p>\n</li>\n</ul>\n<h2>轻量</h2>\n<p><img src=\"//static.cnodejs.org/Fr6vycAZd3MVCkXpTD4WjQvlPkfX\" alt=\"image.png\"></p>\n<p>imu设计为面向现代浏览器的不可变数据js库，只运行于支持proxy特性的js环境，原生支持根对象为<code>Map</code>，<code>Set</code>，<code>Array</code>，<code>Object</code>，相比immer 6.3kb大小容量接近减少1/3。</p>\n<p>同时提供了更多实用的api</p>\n<p><img src=\"//static.cnodejs.org/FqnvQ7Z8CT5R4eH7lSyx8KwVX55h\" alt=\"image.png\"></p>\n<h3>immut</h3>\n<p>生成一个不可修改的对象<code>im</code>，但原始对象的修改将同步会影响到<code>im</code></p>\n<pre class=\"prettyprint language-ts\"><code>import { immut } from &#x27;limu&#x27;;\n\nconst base = { a: 1, b: 2, c: [1, 2, 3], d: { d1: 1, d2: 2 } };\nconst im = immut(base);\n\nim.a = 100; &#x2F;&#x2F; 修改无效\nbase.a = 100; &#x2F;&#x2F; 修改会影响 im\n</code></pre><p>合并后依然可以读到最新值</p>\n<pre class=\"prettyprint language-ts\"><code>const base = { a: 1, b: 2, c: [1, 2, 3], d: { d1: 1, d2: 2 } };\nconst im = immut(base);\nconst draft = createDraft(base);\ndraft.d.d1 = 100;\n\nconsole.log(im.d.d1); &#x2F;&#x2F; 1，保持不变\nconst next = finishDraft(draft);\nObject.assign(base, next);\nconsole.log(im.d.d1); &#x2F;&#x2F; 100，im和base始终保持数据同步\n</code></pre><blockquote>\n<p>immut 采用了读时浅代理的机制，相比deepFreeze会拥有更好性能，适用于不暴露原始对象出去，只暴露生成的不可变对象出去的场景，并利用onOperate收集读依赖</p>\n</blockquote>\n<h3>onOperate</h3>\n<p>支持对<code>createDraft</code>、<code>produce</code>、<code>immt</code> 配置 <code>onOperate</code>回调监听所有读写变化（注：immut只能监听到读变化）</p>\n<p>例如以下代码：</p>\n<pre class=\"prettyprint language-ts\"><code>const { createDraft, finishDraft } = limu;\nconst base = new Map([\n  [&#x27;nick&#x27;, { list: [1,2,3], info: { age: 1, grade: 4, money: 1000 } }],\n  [&#x27;fancy&#x27;, { list: [1,2,3,4,5], info: { age: 2, grade: 6, money: 100000000 } }],\n  [&#x27;anonymous&#x27;, { list: [1,2], info: { age: 0, grade: 0, money: 0 } }],\n]);\nconst draft = createDraft(base, { onOperate: console.log });\ndraft.delete(&#x27;anonymous&#x27;);\ndraft.get(&#x27;fancy&#x27;).info.money = 200000000;\nconst final = finishDraft(draft);\n</code></pre><p>将产生以下监听结果，非常有利于上层框架做读写依赖的收集</p>\n<p><img src=\"//static.cnodejs.org/FmTpRNTGqFFqeIsUa976IF922TR9\" alt=\"image.png\"></p>\n<blockquote>\n<p>即将发布的<a href=\"https://github.com/heluxjs/helux\">helux v3</a>基于<code>limu</code>驱动后完成了非常多有意思的功能，尽请期待。</p>\n</blockquote>\n<h2>结语</h2>\n<p>2年磨砺，让一个最初有点玩具性质的作品最终落地（融入concent、helux）是我意料之外的结果，结合最近爆火的室温超导的韩国团队做类比，他们的LK-99一烧就是20多年，不管结果是否如意，至少拥有一颗挚爱科学的心才能够坚持下来，想起在无数个深夜一遍遍<code>npm run test</code>并优化代码，何尝又不是因为保持一颗挚爱的心而沉溺进去炼代码丹呢？</p>\n<p>不管 limu 是否会被淹没在历史的星辰大海里，稳定版的发布算是给自己一个交代了，愿各位码客也保持源源不断的求知欲炼出心中的丹药。</p>\n<h2>友链</h2>\n<p>欢迎关注我的其他项目 👇</p>\n<ul>\n<li>工具链无关sdk化模块联邦 <a href=\"https://github.com/tnfe/hel\">hel-micro</a></li>\n<li>即将发布的具有深浅依赖收集双策略和有向图架构的全新状态库 <a href=\"https://github.com/heluxjs/helux\">helux v3</a></li>\n</ul>\n</div>",
      "title": "剑指immer，更快更强的不可变数据js工具 limu 稳定版发布！",
      "last_reply_at": "2023-08-30T09:03:48.610Z",
      "good": false,
      "top": false,
      "reply_count": 6,
      "visit_count": 1374,
      "create_at": "2023-08-09T13:19:28.435Z",
      "author": {
        "loginname": "fantasticsoul",
        "avatar_url": "https://avatars.githubusercontent.com/u/7334950?v=4&s=120"
      }
    },
    {
      "id": "64e4565fed492ed11b7c1eea",
      "author_id": "54009f5ccd66f2eb37190485",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><a href=\"https://github.com/ishtms/learn-nodejs-hard-way\">https://github.com/ishtms/learn-nodejs-hard-way</a></p>\n<p>这个repo竟然上了趋势榜</p>\n<p>这个作者还是挺有勇气的。logtar其实写的很一般</p>\n</div>",
      "title": "learn-nodejs-hard-way，这个repo竟然上了趋势榜",
      "last_reply_at": "2023-08-30T09:03:18.225Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 1191,
      "create_at": "2023-08-22T06:31:59.306Z",
      "author": {
        "loginname": "i5ting",
        "avatar_url": "https://avatars.githubusercontent.com/u/3118295?v=4&s=120"
      }
    },
    {
      "id": "64a6720b56d983eb4a9daaa1",
      "author_id": "59eeb8e11bbf067d5c3fa7c6",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h2>背景</h2>\n<p>咱们新建一个NodeJS项目，必然会安装许多依赖包，因此经常需要查阅某些依赖包的源码文件。但是，由于node_modules目录包含的文件太多，出于性能考虑，在VSCode中默认情况下是禁止搜索node_modules目录的。在这种情况下，我们将不得不依次展开node_modules的文件目录树，来查找我们所需要的文件。相信这种体验一定是非常低效、恼人的。那么，我们该如何定制VSCode的这种缺省行为呢？</p>\n<h2>目标</h2>\n<p>我们以CabloyJS项目为例。一个新建的CabloyJS项目包含大量核心模块，我们希望快速查看工作流模块<code>a-flow</code>的源码，可以这样操作:</p>\n<ol>\n<li>\n<p>使用快捷键<code>Ctrl + P</code>，打开<code>Quick Open</code>面板</p>\n</li>\n<li>\n<p>输入<code>a-flow/pa</code>，即可快速定位到文件<code>node_modules/egg-born-module-a-flow/package.json</code></p>\n</li>\n</ol>\n<p><img src=\"https://portal.cabloy.com/api/a/file/file/download/c4912121cc204c599e6429fdacdbace1.png\" alt></p>\n<h2>VSCode配置</h2>\n<p>为了达到以上目标，我们仅需要在<code>settings.json</code>文件中添加以下配置：</p>\n<pre class=\"prettyprint language- javascript\"><code>{\n    &quot;search.exclude&quot;: {\n        &quot;**&#x2F;node_modules&quot;:false\n    },\n    &quot;search.useIgnoreFiles&quot;:false\n}\n</code></pre><ol>\n<li>\n<p>将<code>**/node_modules</code>设为<code>false</code>，从而禁用缺省行为，从而支持node_modules目录的检索</p>\n</li>\n<li>\n<p>对于许多项目而言，将<code>**/node_modules</code>设为<code>false</code>就已经足够了。那么，为什么还需要将<code>search.useIgnoreFiles</code>设为<code>false</code>呢？这是因为有的项目包含<code>.gitignore</code>文件，而<code>.gitignore</code>文件中忽略了node_modules目录，这个机制仍然限制了VSCode对node_modules目录的检索。因此，我们需要配置该参数，从而忽略这种默认行为</p>\n</li>\n</ol>\n<h2>结论</h2>\n<p>简而言之，将<code>search.useIgnoreFiles</code>设置为<code>false</code>才是这篇文章的题眼。因为，我是查阅了大量英文社区资源才得出了这个问题所在，也希望能节省大家的时间</p>\n</div>",
      "title": "VSCode如何通过Ctrl+P快速打开node_modules中的文件",
      "last_reply_at": "2023-08-25T04:58:15.114Z",
      "good": false,
      "top": false,
      "reply_count": 3,
      "visit_count": 3058,
      "create_at": "2023-07-06T07:49:31.305Z",
      "author": {
        "loginname": "zhennann",
        "avatar_url": "https://avatars.githubusercontent.com/u/24246985?v=4&s=120"
      }
    },
    {
      "id": "63fc57a4007208fe309e331e",
      "author_id": "5d47c83b4f472f7fee152927",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>今天闲着没事看 coffeescript，发现 coffeescript 会把</p>\n<pre class=\"prettyprint language- coffeescript\"><code>a = undefined\nif a?\n  console.log a\n</code></pre><p>翻译成：</p>\n<pre class=\"prettyprint language- javascript\"><code>var a;\na = void 0;\nif (a != null) {\n  console.log(a);\n}\n</code></pre><p>然后我想了想、试了试，发现 <code>0</code>、<code>false</code>、<code>&quot;&quot;</code> 都不满足 <code>== null</code></p>\n<p>于是我就想，可不可以使用 <code>a == null</code> 来代替  <code>a === null</code> || <code>a === undefined</code> 呢？</p>\n</div>",
      "title": "可不可以用 a == null 来代替  a === null || a === undefined",
      "last_reply_at": "2023-08-25T01:00:50.659Z",
      "good": false,
      "top": false,
      "reply_count": 17,
      "visit_count": 5872,
      "create_at": "2023-02-27T07:11:32.059Z",
      "author": {
        "loginname": "daGaiGuanYu",
        "avatar_url": "https://avatars.githubusercontent.com/u/27003009?v=4&s=120"
      }
    },
    {
      "id": "64df2e24ed492e8b047c1d02",
      "author_id": "5cede24d4036f24194cf7669",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>如题所示，nest打包之后运行现在找不到包，打开dis/tsconfig.build.tsbuildinfo  ，发现 依赖项还在引用…/node_modules/ 。但是打包之后为什么不能把node_modules依赖打包进来。还是需要做什么设置。求大佬解答</p>\n</div>",
      "title": "nest 打包Cannot find module '@nestjs/core'问题",
      "last_reply_at": "2023-08-25T00:58:45.950Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 920,
      "create_at": "2023-08-18T08:39:00.767Z",
      "author": {
        "loginname": "SKandAV",
        "avatar_url": "https://avatars.githubusercontent.com/u/26410064?v=4&s=120"
      }
    },
    {
      "id": "559b377ad488d37a7625331f",
      "author_id": "557ed6d851f473b261d0057c",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>让我这样没钱买vpn的吊丝情何以堪啊，好歹也是国内的社区啊</p>\n</div>",
      "title": "cnode的搜索怎么是google",
      "last_reply_at": "2023-08-18T15:03:43.167Z",
      "good": false,
      "top": false,
      "reply_count": 18,
      "visit_count": 6486,
      "create_at": "2015-07-07T02:20:42.124Z",
      "author": {
        "loginname": "wenshiqi0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12891758?v=3&s=120"
      }
    },
    {
      "id": "596eb7768f05de0819fdb301",
      "author_id": "538ebff9c3ee0b58208376c7",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>如题。知道内情的进来说说？<a href=\"/user/alsotang\">@alsotang</a> and <a href=\"/user/i5ting\">@i5ting</a>？</p>\n</div>",
      "title": "听说明年2月之前要禁止所有个人用户使用VPN，是真的吗？",
      "last_reply_at": "2023-08-18T15:00:52.070Z",
      "good": false,
      "top": false,
      "reply_count": 63,
      "visit_count": 23943,
      "create_at": "2017-07-19T01:35:50.929Z",
      "author": {
        "loginname": "zhanzhenzhen",
        "avatar_url": "https://avatars3.githubusercontent.com/u/731796?v=4&s=120"
      }
    },
    {
      "id": "5514b132e26684ed7ff21bf2",
      "author_id": "53fdd8502243147e7857b2bb",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>发现一堆网站上不了\n你们都用什么 VPN? 推荐下\n以前到 V2EX 查，发现 V2EX 也上不了\n免费的付费的都行</p>\n</div>",
      "title": "你用什么 VPN?",
      "last_reply_at": "2023-08-18T14:59:28.749Z",
      "good": false,
      "top": false,
      "reply_count": 65,
      "visit_count": 43632,
      "create_at": "2015-03-27T01:24:02.838Z",
      "author": {
        "loginname": "russj",
        "avatar_url": "https://avatars2.githubusercontent.com/u/2281763?v=4&s=120"
      }
    },
    {
      "id": "575c0f3a2ad3c06f1aa3d5ed",
      "author_id": "56cd160ac045c3743304beec",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><ul>\n<li>别用国内付费VPN服务，<strong>Green就是教训</strong>。</li>\n<li>别想着“免费”，能用的付费vpn得花钱，不便宜，<strong>便宜的根本没法用</strong>，几十块一年的等于智商税。</li>\n<li><strong>没有100%稳定高速的服务</strong>，特殊时段，即使付费vpn也不能总是“高速稳定”，别指望一年365天一天24小时随时1080p油管。</li>\n<li>一线国外付费VPN能保证的是“<strong>较好</strong>”的连通率和速度，不完美，但至少能用google，gmail和可接受的油管速度，这仍是目前最好的方案。</li>\n</ul>\n<p><strong>国内还能用支付宝买到</strong>的国外付费vpn推荐：</p>\n<h2>ExpressVPN</h2>\n<p>全球148+服务器所在地 / 无限流量 / 多协议，包括openVPN / 一键连接 / 同时3台设备 / 256-bit AES加密 / 支付宝支付 / 支持路由器连接 / 完全IP隐藏 / 零日志 / 全终端覆盖 / 30天无条件退款 / Split tunneling技术 + 浏览器插件，同时访问内外网 / <strong>速度相对最快</strong></p>\n<h2>熊猫VPN</h2>\n<p><code>缺点：运营时间还比较短，只支持同时3个连接，且不支持路由器和Linux，缺乏自动重连等职能功能。</code></p>\n<p>VPN的后起之秀，正在促销，<strong>买一年送一年</strong>，服务器亲测可用，而且很快。产品运营时间还不长，处于推广阶段，价格优惠幅度很大。</p>\n<p>支持Windows，Mac，iOS，Android客户端。连接VPN只需要一个开关即可。界面极其简洁，同时3台设备，这是一个让人惊喜的发现，支持智能分流。</p>\n<p><strong>虽然熊猫VPN远没有ExpressVPN强大，如客户端支持远没有ExpressVPN丰富，同时也只支持3个连接，官方也不披露日志政策</strong>，但对不少人也应该日常够用。从客户端来看，熊猫VPN背后可能不是VPN翻墙技术，而是用了类似SSR的某种加密代理，这无法确定，但是能用最重要。</p>\n<h2>VyprVPN</h2>\n<p>70+自有服务器所在地，200,000+IP地址 / 无限流量 / 多协议，独家混淆协议 / 一键连接 / 同时5台设备 / 支持P2P / 变色龙加密，<strong>连接相对最稳定</strong> / 支付宝支付 / 支持路由器连接 / NAT安全机制 / DNS加密 / 全终端覆盖 / 2年款最大优惠 / 30天无条件退款 / 按程序控制网络技术，同时访问内外网</p>\n</div>",
      "title": "稳定的付费vpn推荐",
      "last_reply_at": "2023-08-18T14:58:49.142Z",
      "good": false,
      "top": false,
      "reply_count": 23,
      "visit_count": 47399,
      "create_at": "2016-06-11T13:16:42.992Z",
      "author": {
        "loginname": "flamingtop",
        "avatar_url": "https://avatars3.githubusercontent.com/u/132677?v=4&s=120"
      }
    },
    {
      "id": "583191e267db500b79c100ed",
      "author_id": "582468cc8e0f8bb038f38b6e",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><strong>前言</strong></p>\n<p><strong>此教主要程针对已经能够科学上网,但不想继续花费高额vpn费用的用户.</strong>\n<strong>但是</strong>如果还不会科学上网,也没有关系.请购买<strong>体验套餐</strong>.然后访问gfw.press官网,注册账号.实现<strong>永久免费服务</strong>.</p>\n<blockquote>\n<ul>\n<li>GFW.Press将方法配合SwitchOmega / SocksCap64两款软件实现<strong>一键fq</strong>.*</li>\n</ul>\n</blockquote>\n<hr>\n<p>=======================================完美的分割线======================================</p>\n<h2><strong>1. GFW.Press</strong>\n在这里首先感谢赵国劣绅 石斑鱼大爷  <a href=\"https://github.com/chinashiyu\">github源码</a>\n<strong>教程开始</strong>\n<em>首先要登录官网注册账号,能翻樯的直接登录gfw.press,不能翻樯的先购买体验服务</em>\n** <a href=\"https://my.shadowsocksr.com/cart.php?gid=7\">体验套餐购买地址</a>**\n** <a href=\"https://my.shadowsocksr.com/knowledgebase.php?action=displayarticle&amp;id=26\">购买完毕使用教程</a>**</h2>\n<p>现在已经大家都能够翻樯了.接下来就要使用免费服务了.</p>\n<ul>\n<li>\n<p>1.登录gfw.press官网**(这里需要翻樯)**</p>\n</li>\n<li>\n<p>2.点击注册</p>\n</li>\n<li>\n<p>3.注册成功后点击登录,你将会看到节点信息\n<img src=\"//static.cnodejs.org/FjRR4JHK1lc6SzxNtnAc8HmumyOH\" alt=\"Press用户界面.PNG\"></p>\n</li>\n<li>\n<p>4.下载gfw.press软件. 由于下载经常会断开.我已经下好了.      <a href=\"http://pan.baidu.com/s/1kVlW7np\">百度云链接</a>密码:hffg</p>\n</li>\n<li>\n<p>5.安装完毕后双击打开,并安装gfw.press官网中提供的账号填入节点,端口以及密码.</p>\n</li>\n<li>\n<p>6.打开谷歌浏览器,搜索chrome网上应用店,打开并搜索插件switchomega,安装插件   <strong>(这里需要翻樯)</strong>\n<img src=\"//static.cnodejs.org/FjJmrA7AVIocymjZN_-SN2RgrPih\" alt=\"chrome网上应用店下载switchomega插件.png\"></p>\n</li>\n<li>\n<p>7.下载完毕后,你的谷歌浏览器右上角将多出一个小图标.单击选项按钮进入管理界面.\n<img src=\"//static.cnodejs.org/FvkjspPx9UswCmRl07ZUkxnqSJ8q\" alt=\"switchomega配置说明-1.png\"></p>\n</li>\n<li>\n<p>8.进入管理界面后,进行如下配置\n\t(1)新建情景模式\n<img src=\"//static.cnodejs.org/FkRw9vxJhAECricmXA4xbjG318x6\" alt=\"switchomega配置说明-2.png\">\n\t(2)填入路由信息\n<img src=\"//static.cnodejs.org/FqqxP52d_OWXfxc2BZMuHViObcsm\" alt=\"switchomega配置说明-3.png\"></p>\n</li>\n<li>\n<p>9.填完以后一定记得点击  <strong>应用选项</strong>  保存刚才的配置.然后关闭标签页即可.</p>\n</li>\n<li>\n<p>10.此时单击你右上角的switchomega插件将会多出一个GFW.press选项.\n<img src=\"//static.cnodejs.org/Fn1Px1sehKJoPP35CubVqFTTimxh\" alt=\"untitled1.png\">\n11.点击切换到GFW.Press模式下,恭喜你.可以永久免费翻樯了.\n12.如果你不确定自己有没有成功,那么登录ipip.net就能看到自己的ip地址了.\n<img src=\"//static.cnodejs.org/FtjJX7vhuCy1wx-KHyRddqsUOWRP\" alt=\"switchomega配置说明-5.png\"></p>\n</li>\n</ul>\n</div>",
      "title": "GFW.Press永久翻樯(免费)",
      "last_reply_at": "2023-08-18T14:57:40.370Z",
      "good": false,
      "top": false,
      "reply_count": 41,
      "visit_count": 165163,
      "create_at": "2016-11-20T12:06:58.395Z",
      "author": {
        "loginname": "yuxiaochi12345",
        "avatar_url": "https://avatars.githubusercontent.com/u/18710967?v=3&s=120"
      }
    },
    {
      "id": "56382aabb0cedafd389702f3",
      "author_id": "5457490b6537f4d52c414dd1",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>鉴于我朝很多网站访问不了，google等就是大悲剧，之前一直在用VPN，但是公司内网VPN被封，诸多工具也惨遭毒手。。我辈怎能容忍。\n目前只有代理没有被封，于是搞了个代理扫描工具并开源：\n<a href=\"https://github.com/haisapan/ProxyScanner.NodeJs\">https://github.com/haisapan/ProxyScanner.NodeJs</a></p>\n<p>目前只有xici的源，后续会加入更多，大家有好的代理站点源也可以介绍下。\n可以指定特定网站是否可用进行测试： <strong>node app.js <a href=\"https://facebook.com\">https://facebook.com</a></strong>\n后续会做成可执行程序。\n欢迎提意见，好的话给个star啦</p>\n</div>",
      "title": "分享一个Node开源代理服务器扫描工具，可以用来科学上网",
      "last_reply_at": "2023-08-18T14:56:51.027Z",
      "good": false,
      "top": false,
      "reply_count": 6,
      "visit_count": 8520,
      "create_at": "2015-11-03T03:31:55.597Z",
      "author": {
        "loginname": "haisapan",
        "avatar_url": "https://avatars.githubusercontent.com/u/1772696?v=3&s=120"
      }
    },
    {
      "id": "53b93bab1b009b31532ef934",
      "author_id": "50f7a0a9df9e9fcc5889a1b0",
      "content": "<div class=\"markdown-text\"><p>要安全的, 要用gmail.\n封这么厉害…</p>\n</div>",
      "title": "有靠谱的VPN推荐吗?",
      "last_reply_at": "2023-08-18T14:56:07.859Z",
      "good": false,
      "top": false,
      "reply_count": 85,
      "visit_count": 411550,
      "create_at": "2014-07-06T12:06:03.451Z",
      "author": {
        "loginname": "ronincn",
        "avatar_url": "//gravatar.com/avatar/0582e15ee13a3fef9d78dac6f0c71575?size=48"
      }
    },
    {
      "id": "5a2d1f919807389a1809f29a",
      "author_id": "538ebff9c3ee0b58208376c7",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>如题！</p>\n</div>",
      "title": "为什么现在Chrome不用翻墙也能更新了？",
      "last_reply_at": "2023-08-18T14:45:52.435Z",
      "good": false,
      "top": false,
      "reply_count": 1,
      "visit_count": 3351,
      "create_at": "2017-12-10T11:50:41.470Z",
      "author": {
        "loginname": "zhanzhenzhen",
        "avatar_url": "https://avatars3.githubusercontent.com/u/731796?v=4&s=120"
      }
    },
    {
      "id": "545249abd0c2f0fe2f533ad6",
      "author_id": "544475344ca29a4d4c08c331",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p>rt</p>\n</div>",
      "title": "请教大神们，都怎么实现‘科学上网’撒",
      "last_reply_at": "2023-08-18T14:45:32.290Z",
      "good": false,
      "top": false,
      "reply_count": 31,
      "visit_count": 19413,
      "create_at": "2014-10-30T14:22:35.923Z",
      "author": {
        "loginname": "iamnotblank",
        "avatar_url": "https://avatars1.githubusercontent.com/u/6949176?v=4&s=120"
      }
    },
    {
      "id": "5b0fc85b5cd02be640901047",
      "author_id": "5b094f5257137f22415c4685",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><h1>翻墙与科学上网，中国VPN推荐</h1>\n<p>本文总结<a href=\"https://www.wallmama.com\">翻墙与科学上网工具</a>，介绍VPN，蓝灯、SSR等翻墙软件。免费VPN，免费SSR我就不推荐了，付费VPN中国能用的越来越少，何况免费的。现在没有让你一劳永逸的翻墙工具，也没有完美的科学上网，即使是ExpressVPN也只能做到大概全年97%连通率，个人经验，其它工具更做不到100%。个人建议普通用户用VPN翻墙，本文也优先作中国VPN推荐，非果粉用蓝灯也行。懂技术的人可以考虑SSR，付费SSR节点长期更靠谱。</p>\n<p>每年的春节、三月初、六月初、国庆期间、某些突发事件时期都是“<strong>敏感时期</strong>”，基本上在中国使用的所有科学上网工具都会出现频繁断线、连接超时，速度大幅下降等问题，每次持续1-2周左右，过后自动恢复。如果你的学习工作高度依赖国外网站或App，建议提早多准备几个工具，个人经验是VPN+蓝灯+SSR三者的组合基本上可以帮你度过敏感期。非重度翻墙用户如果不想折腾多款工具的，不妨等几天网络恢复，因为其它也没有什么更好的办法。</p>\n<p><strong>这是本文推荐的中国能用的VPN速览：</strong></p>\n<ul>\n<li>1 <a href=\"https://indx.cc/expcnd\">ExpressVPN</a>：什么都不需要说，我自己用了5年多，市场上最强跨设备通用翻墙软件</li>\n<li>2 <a href=\"https://indx.cc/pandavpn\">PandaVPN</a>：新出的服务，目前工作良好，其实<strong>不是VPN而是加密代理</strong></li>\n<li>3 <a href=\"https://indx.cc/astrillcn\">AstrillVPN</a>：低调的厂商，但其实中国一直能用，在中国的老外很多都用这个</li>\n<li>4 <a href=\"https://indx.cc/vyr\">VyprVPN</a>：兢兢业业为中国翻墙者服务，不是最强大的，但能用</li>\n</ul>\n<p><strong>最后更新：2019年11月</strong></p>\n<p><code>列表可能随时变化，可以收藏本帖，保持关注。</code></p>\n<p>不要期望单个工具能保证100%连通率，至少每年敏感时期绝对是做不到的。如果你追求全年100%连通率，需要一个工具组合，我自己的组合是：\n<a href=\"https://indx.cc/expcnd\">ExpressVPN - 基于VPN协议</a> + 蓝灯（或<a href=\"https://indx.cc/pandavpn\">PandaVPN - 第三方加密代理服务</a>） + <a href=\"https://indx.cc/vtr\">自建SSR - 较私密的加密代理</a>，基本上前两者就可做到99.5%+的连通率。</p>\n<h1>翻墙软件比较</h1>\n<p>主流翻墙软件目前就两大类：一是VPN（OpenVPN等多种协议），二是加密代理（HTTPS，SOCKS5），蓝灯和SSR技术上都属于代理类，VPN、蓝灯、SSR各自都有优缺点。</p>\n<h2>VPN</h2>\n<h3>优点</h3>\n<ul>\n<li><strong>中国政府的政策上留有空间</strong>，特别是OpenVPN协议在商业环境下的广泛使用，使得网络<a href=\"https://zh.wikipedia.org/zh-hans/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E\">防火墙</a>无法在协议级别实现完全屏蔽</li>\n<li>成熟、通用，设备支持更全面，特备是针对路由器等中间网络设备的支持较强，在某些使用场景下没有VPN无法替代</li>\n<li>个人终端客户端使用友好，基本无需配置，装好就能用，升级全自动</li>\n<li>节点选择多，商业VPN的服务器遍布全球，虽然绝大部分都不适合中国，但周边的香港、日本等地的服务器集群也足够用</li>\n</ul>\n<h3>缺点</h3>\n<ul>\n<li>传输开销相比代理类协议（如SOCKS5）大，一般认为VPN的连接与传输速度也相对慢一点</li>\n<li>受打击力度大，国内的服务基本全军覆没，国外的服务能用已经不多，选择越来越少</li>\n<li>供求关系失衡决定了VPN相对自助翻墙方法成本往往更高</li>\n<li>达不到全年100%可用标准，至少我还没找到一年365天都能连上的VPN，特殊时期必挂，一般持续约一周</li>\n</ul>\n<h2>蓝灯</h2>\n<h3>优点</h3>\n<ul>\n<li>基于SOCK5协议，建立连接快，传输开销比VPN小</li>\n<li>是商业软件，相比SSR有更好的客服支持</li>\n<li>有设计良好，好用的客户端</li>\n</ul>\n<h3>缺点</h3>\n<ul>\n<li><strong>不支持iOS设备</strong></li>\n<li>只支持自动连接，不适合需要手动控制连接IP的场景</li>\n<li>隐私保护能力较一线VPN弱</li>\n</ul>\n<h2>SSR</h2>\n<h3>优点</h3>\n<ul>\n<li>可以选择用商业SSR节点，也可以自己架设，相比VPN更灵活</li>\n<li>自建SSR服务器，能用的概率比自建VPN服务器能用的概率大很多</li>\n<li>商业节点或自建服务器硬件要求不高，所以扩展容易、成本低</li>\n<li>因为基于SOCKS5协议，连接快传输开销相比VPN小，效率高</li>\n</ul>\n<h3>缺点</h3>\n<ul>\n<li>协议开源，长期来说被GFW团队攻破是迟早的事，其实不完全攻破只需解析出流量特征，SSR的死期也就到了</li>\n<li>缺乏成熟的一体化、友好的部署方案，服务器安装需要一定手动配置，客户端界面可用性比商用VPN软件也还有距离，所以目前SSR主要在电脑技术人员群体中流行</li>\n</ul>\n<h2>总的来说</h2>\n<p>传统VPN协议因为在商用中高度普及这个非技术原因，完全屏蔽的可能性更小，目前个人用VPN产品在中国能用的虽然已经很少，绝大多数国外VPN厂商也不再投资中国市场，但市场上仍有若干能有效翻墙的VPN，这些商用VPN的客户端的设备支持仍然是最全的，可用性也是最高的。</p>\n<p>蓝灯的稳定性和速度都还行，但最大的缺点是没有iOS版客户端，蓝灯自带广告过滤功能，用处不算太大，但聊胜于无，蓝灯不能手选连接节点，只能自动连接，既方便也不方便，如果用户需要用可控的IP地址，建议用付费VPN吧。</p>\n<p>SSR的最大优势是可选择的VPS不少，挪窝比较容易，缺点是对技术小白不友好，安装配置不算难，但也足以难道大多数普通翻墙用户，而且<strong>SSR在价格上其实未必比VPN便宜多少</strong>。这里不建议复用网站主机做SSR节点，IP被封后会导致网站本身也无法访问。</p>\n<h1>你该用哪种翻墙软件</h1>\n<p><strong>如果翻墙的体验对你很重要，你也不在乎稍微多花点钱</strong>，可以优先考虑一线的付费VPN，<strong>本文下文有好用的中国VPN推荐</strong>。它们都有独立开发的加密混淆技术，穿墙能力很强。这是需要长期投入的技术，免费VPN和绝大多数小付费VPN厂商都没这个预算和技术实力，它们的产品缺乏独立的加密混淆算法，在防火墙的DPI（Deep Packet Inspection）强力侦测面前不堪一击。只有一线VPN厂商才能让你在中国长期稳定地翻墙。绝大多数情况下，买一个靠谱的VPN软件就够你绝大多数时候翻墙用了。</p>\n<p><strong>如果是非iOS用户，也可以考虑蓝灯</strong>，它分为免费版和付费版（Pro），免费版提供每月500Mb的数据流量，客户端大多数时候都可以从Github页面下载。付费版的价格比一线VPN稍便宜，可以从客户端内购升级，付款也不麻烦。不过个人使用的经验，2019年后，蓝灯在中国的翻墙能力有大幅下降，我无法保证在你所在的地区网络上它能有多好用，你可以先试试免费版。</p>\n<p><strong>程序员群体，喜欢自己配置不怕折腾的，可以考虑SSR</strong>，免费SSR节点我不推荐，可以考虑自架或者用购买SSR帐号，现在提供商业SSR节点的第三方越来越多。私有的SSR服务器（多为自架）在敏感时期的穿墙能力可能更强，虽然这也不是100%但私人服务器只要不被侦测到流量特征，更难进入防火墙IP黑名单。<strong>友情提醒：不要散播自架SSR节点。</strong> 除SSR以外，V2Ray，WireGuard，Brook，VMess等翻墙技术也在兴起中，目前来看还比较小众，笔者还没用过这类工具，所以也无从判断它们好不要用，不过这类工具的配置比SSR可能还要复杂，更不适合普通用户。</p>\n<h1>你应该规避的翻墙软件</h1>\n<h2>国内VPN</h2>\n<p>大多数国内VPN都被强制关闭了，但也有的还在以“加速器”的名义在这个不确定的市场里运营着，据我所知，有少数几个还通过了政府审核。<strong>这些国内VPN主要面向游戏玩家群体</strong>，提供游戏加速服务的比较多，官网上也绝不会出现“翻墙”二字。笔者没有用过国内VPN，自从几年前Green VPN被强制关停导致很多用户“放弃退款”以后，我就不再考虑国内VPN服务了，不可抗力下服务终止的风险太大，个人用户容易蒙受损失。我现在只用国外VPN。</p>\n<h2>免费VPN</h2>\n<p>个人不推荐免费VPN。不是说它们没用，其实不少都能用，至少拿来查收个Gmail没问题。我担心的还是首先是隐私，其次是长期稳定性问题。事实上免费VPN很少披露隐私政策，即使披露也难以让人相信，天下没有免费的午餐，网络服务提供商贩卖用户隐私赚钱不是新闻。另外，我还从没用到过哪个免费翻墙工具很稳定速度很快的，最多也就是开始用的时候还行，但很快随着免费用户的快速增加，服务质量会直线下降。</p>\n<p>如果你就是在找免费VPN，百度里基本是搜不到免费VPN的，谷歌可以搜到不少，只是搜到的绝大多数用不了，也有少数能用，此外，安卓官方市场里有很多免费VPN，可以试试，苹果官方（美国）市场也是，如果你的手机能访问这些App应用市场的话。国内大多数手机既没有装Google Play Store，也没有苹果美国市场帐号，所以会比较麻烦。有的APK是可以从第三方市场下载的，可以试试，这个方法能帮你省钱，但很费时间。</p>\n<h2>破解VPN</h2>\n<p>不要相信什么破解VPN，因为VPN软件都分客户端和服务器端，破解了客户端有什么用呢，服务端算法、服务地址等都会变，破解的客户端机会无法自动获得这些更新，能也往往无法和服务器端同步使用。破解版软件很容易被挂马，带病毒，给你的电脑手机系统带来风险。</p>\n<h1>好用的中国VPN推荐</h1>\n<h2>1. <a href=\"https://indx.cc/expcnd\">ExpressVPN</a> - 现在买一年送3个月，30天无理由退款</h2>\n<p><strong>上次测试：2019年11月20日，确定可用。</strong></p>\n<p><code>缺点：一年约97%的连通率，不要期望100%，抱歉。但是，也不要期望哪个工具能做到100%，反正我还没找到</code></p>\n<p>这是最好用的中国VPN，笔者每次回国必备，用了5年，虽然特殊时期也碰到问题，但一年中97%的时间里使用都很流畅。<strong>ExpressVPN已经为中国网民服务了11年。</strong> 这是目前唯一一个任何人想都不用想就可以买的VPN，连通率应该是最高的，速度相比其他VPN软件也不慢，镜像网站更新最及时，隐私保护技术最好，还有最重要的，客户端最好用，设备支持它最全。</p>\n<p><img src=\"https://static.cnodejs.org/Fr5H3c5kz8SZc4bxAETEbWbIo7rQ\" alt=\"ExpressVPN翻墙软件.jpg\"></p>\n<p><strong>为什么ExpressVPN是最好用的中国VPN翻墙软件？</strong></p>\n<p>因为他重视中国市场。</p>\n<p>世界上的VPN软件成千上万，愿意为中国用户提供镜像站的一只手数得过来，<a href=\"https://indx.cc/expcnd\">ExpressVPN的镜像站</a>对中国用户始终保持着可访问。</p>\n<p>客户端好用的VPN不少，但提供无需Google Play Store和苹果美国商店即可安装客户端的VPN厂商，恐怕ExpressVPN是仅有的几家之一。</p>\n<p>推荐香港、日本、新加坡、美国节点，提供国内能打开的镜像站，<a href=\"https://indx.cc/expcnd\">不翻墙即可购买</a>，真正全终端覆盖，电脑（Windows，MacOS，Linux），手机（安卓，iOS：iPhone，iPad），路由器，游戏主机（PS2，XBox）等，安卓手机无需Google Play也可安装，iOS设备无需访问苹果商店也可安装，同时5台设备，单独配置哪些应用走VPN哪些不走（Split Tunneling） ，<strong>买一年送3个月，30天无理由退款</strong>，<a href=\"https://indx.cc/expcnd\">买一年送3个月</a>，支持支付宝付款，支持P2P下载，不限流量。</p>\n<h2>2. <a href=\"https://indx.cc/pandavpn\">熊猫VPN</a></h2>\n<p><strong>上次测试：2019年11月20日，确认可用。</strong></p>\n<p><code>缺点：运营时间还比较短，只支持同时3个连接，且不支持路由器和Linux，缺乏自动重连等职能功能。</code></p>\n<p>VPN的后起之秀，正在促销，<strong>买一年送一年</strong>，服务器亲测可用，而且很快。产品运营时间还不长，处于推广阶段，价格优惠幅度很大。</p>\n<p>支持Windows，Mac，iOS，Android客户端。连接VPN只需要一个开关即可。界面极其简洁，同时3台设备，这是一个让人惊喜的发现，支持智能分流。</p>\n<p><strong>虽然熊猫VPN远没有<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>强大，如客户端支持远没有ExpressVPN丰富，同时也只支持3个连接，官方也不披露日志政策</strong>，但对不少人也应该日常够用。从客户端来看，熊猫VPN背后可能不是VPN翻墙技术，而是用了类似SSR的某种加密代理，这无法确定，但是能用最重要。</p>\n<p><img src=\"https://static.cnodejs.org/FnIjvxtTcX6dVtrutkuJr9LbyTwK\" alt=\"熊猫VPN.jpg\"></p>\n<h2>3. <a href=\"https://indx.cc/astrillcn\">Astrill</a> (该链接需翻墙打开)</h2>\n<p><strong>上次测试：2019年11月20日，可用</strong></p>\n<p><code>缺点：价格贵，国内须翻墙才可购买，过于低调。</code></p>\n<p>几年前Astrill是流行的中国VPN，后来墙高了以后，给大家的感觉是Astrill彻底退出中国市场了，从某种意义上来说却是如此，但其实Astrill一直都是中国能用的VPN之一，只不过官方已经停止了任何针对中国市场的营销，你在国外各中文网站上也极少看到对Astril VPN的推荐，而且目前从国内貌似无法直接买到它，所以上面的链接需要翻墙才能访问，不得不说这使得Astrill对绝大多数中国翻墙网民来说不友好了。</p>\n<p>但也有例外。如果你此刻人在国外，打算回国探亲或者工作，可以提前在国外买好Astrill带回国使用；如果你在国内但已翻墙，也可以考虑购买Astrill。它其实一直都能用，只是特别低调而已。</p>\n<p><img src=\"https://static.cnodejs.org/Ft7eMjG0ylr5Wy2n429oBBKpqngC\" alt=\"astrillvpn.jpg\"></p>\n<h2>4. <a href=\"https://indx.cc/vyr\">VyprVPN</a></h2>\n<p><strong>上次测试：2019年11月20日，确定可用。</strong></p>\n<p><code>缺点：中国必须用变色龙版本，但这个版本不支持iOS。</code></p>\n<p><strong>记得一定要购买高配（较贵）的那个，低配的不包含变色龙协议，中国用不了。很可惜高配版不提供iOS客户端，如果你要iOS翻墙，建议还是买ExpressVPN吧。使用的时候，务必在配置里打开变色龙协议，否则是连不上的。</strong></p>\n<p>推荐台湾、韩国，香港、日本、新加坡、美国等地节点，不用翻墙国内可以购买，独家变色龙混淆协议 ，同时5台设备，30天无条件退款，支持支付宝付款，支持P2P下载，不限流量。</p>\n<p>VyprVPN是我确定中国能用的VPN软件，台湾、韩国的节点出奇地快。VyprVPN的价格低于ExpressVPN，对于觉得ExpressVPN太贵的用户，我推荐你用VyprVPN。</p>\n<p>一分钱一分货，VyprVPN的设备支持，可用节点少（对中国用户）没有ExpressVPN强大。</p>\n<p><img src=\"https://static.cnodejs.org/FumhaSBjheocx1WZT-DYjMc_HewW\" alt=\"vyprvpn.jpg\"></p>\n<h1>在中国使用VPN的几个问题</h1>\n<h2>VPN购买</h2>\n<p>一线VPN如ExpressVPN都能直接从国内直接买到，不必先翻墙。</p>\n<p>主流VPN厂商都至少支持支付宝，很多也支持银联，有人可能担心用国内支付方式会泄露个人信息。如果你从国内vpn厂商哪里购买，很有可能，但国外vpn厂商不受中国法律监管，而且国外vpn厂商对账单抬头都做了处理，即使不处理也不必担心，中国vpn用户至少几百万，只要你不提供分发下载，个人平时正常上网学习是没问题的。支付都是和个人信息绑定的，除非你用比特币支付，否则现行金融系统中的任何交易都可以被追踪，用支付宝和信用卡的可追溯性是相同的，既然如此，不必杞人忧天。</p>\n<p>有些vpn厂商提供免费试用，有的要绑定信用卡，有的不需要，如果要绑定信用卡，也不用过分担心，通常你注册的账号里都会有“取消订阅”的功能，如果没有，也可以联系客服，让他们帮忙取消。更多的厂商提供的是无条件退款服务，vpn购买者对产品有任何不满意，都可以要求退款，通常这需要联系客服或使用官方提供的其他联系方式，退款一般需要几天到账。</p>\n<h2>服务器选择</h2>\n<p>香港到大陆的ping值是最低的（小于100ms），如果软件提供，应该是最优质的翻墙节点。日本（100ms至200ms之间），美国（200ms以上），新加坡（200ms以上），都是连接稳定速度较好的VPN节点。提供台湾节点和韩国节点的VPN不多，我自己的感觉，连上的时候很快，但经常连不上，不知道什么原因。</p>\n<p>如果VPN有自动推荐最快服务器功能，多数情况只要用它推荐的就可以了。在特殊时期，近中国大陆的香港、日本节点连通率低，这时候美国、英国，甚至澳洲的连通率反而高，可以优先试试。</p>\n<h2>断线怎么办</h2>\n<p>没有100%稳定的VPN，每年特殊时间段（如六月初）的连接质量都不好，容易断线，这不是某个VPN的问题，所有的翻墙软件都会这样，一般到六月中就会完全恢复。</p>\n<p>日常使用，偶尔断线，换服务器重连即可。</p>\n<p>即使是同一个服务，在一天不同时段，或在不同地域访问，服务质量也会不同，如果你带着小飞机全国各地跑，也是一样，这是由当地网络状况决定的。</p>\n<p>网上说的什么某个VPN软件看<a href=\"https://www.youtube.com\">油管</a>一年365天一天24小时都能1080P，是不可信的。但一线VPN让你连上能稳定流畅地观看720P的视频应该没问题。</p>\n<h2>敏感时期如何度过</h2>\n<p>个人经验。<strong>这时候香港、日本等近中国大陆的节点连通率会很低，反而美国、英国，甚至澳大利亚的节点反而容易连上</strong>。</p>\n<p>可以提前准备多个工具，这是目前我能找到的最可靠的方法。关注VPN厂商的邮件列表，提前询问客服，确定对方是否会近期推出“特殊版本”的软件更新。</p>\n<h1>各设备翻墙最佳姿势</h1>\n<h2>全设备翻墙</h2>\n<p>目前市场上还没有比<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>支持设备更多的翻墙软件，VyprVPN（变色龙版）不支持iOS，蓝灯不支持iOS，熊猫不支持路由器，其它一线的VPN也都有遗漏，只有ExpressVPN，基本从头到脚支持所有市场上你能找得到的设备类型，所以它应该是全设备通用翻墙的首选工具。</p>\n<h2>电脑翻墙</h2>\n<p>电脑上VPN，蓝灯，SSR都是可行的方案。对小白来说，VPN和蓝灯的客户端省去配置的麻烦，花钱省时间。如果懂技术，SSR也不错。</p>\n<h2>安卓翻墙</h2>\n<p>安卓手机上，VPN和蓝灯翻墙都不错。看个人习惯，SSR也可以用，只是好用的客户端安装配置可能要花点时间。友情提醒一下，<strong>尽量不要在第三方安卓市场上下载安装所谓“终身免费VPN”</strong>，警惕这类软件钓鱼，在你的手机窃密。</p>\n<h2>iOS翻墙</h2>\n<p>iPhone、iPad等iOS上翻墙，VyprVPN和蓝灯是用不了的，你的在几个一线VPN或者SSR方案里选，这些VPN中国苹果手机上都能用。如果选SSR，可以考虑买知名的ShadowRocket客户端。</p>\n<h2>路由器翻墙</h2>\n<p>我还没看到那款科学上网工具能支持所有制式的路由器的，我想未来也不会有。在你决定要用路由器做翻墙网关前，要看清楚你选择的翻墙软件支不支持你的路由器型号，我建议以<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>支持的路由器列表为参考（如果它不支持，其它工具也大概率不会支持），如果不支持，你得考虑购买兼容的路由器型号。</p>\n<h2>智能电视翻墙</h2>\n<p>不管是Apple TV，还是各种安卓电视（小米盒子、天猫盒子、FireTV），本质上它们仍然是安装了iOS或Android操作系统类手机设备，看前面的安卓和iOS翻墙。</p>\n<h2>游戏主机翻墙</h2>\n<p>能支持游戏主机（PlayStagion，Xbox，Nintendo Switch）的翻墙工具本来就很少，能支持多种此类设备的就更是凤毛麟角，目前对游戏设备支持最好的科学上网工具，是<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>。</p>\n<h1>蓝灯介绍</h1>\n<p><img src=\"https://static.cnodejs.org/FkPGWuKIqmRZWOADMT7glQ8meS19\" alt=\"蓝灯.jpg\"></p>\n<h2>蓝灯不是VPN</h2>\n<p>蓝灯不是VPN，基于SOCKS5协议的加密代理，技术上和ShadowSocks接近。如果网上有人告诉你有蓝灯VPN可以下载，基本都是钓鱼的下载链接，蓝灯就是一个代理翻墙工具，只不过客户端自动化了代理设置的很多细节。</p>\n<p>代理类科学上网工具的优缺点：建立连接的速度一般比传统VPN快，理论上SOCKS协议的传输开销比VPN小，速度比VPN快，缺点是没有VPN作为底层协议那么通用，而且隐私保护的强度没有用付费VPN翻墙那么强。</p>\n<h2>蓝灯优缺点</h2>\n<p>蓝灯相比传统VPN的优缺点：连接速度确实很快，ExpressVPN平均可能需要几十秒才能建立连接，但蓝灯基本是秒连，不过我用两者分别看Youtube并感觉不到速度差距。设备支持上，蓝灯提供Windows，MacOS，安卓客户端，下载安装方便，有中国可访问的<a href=\"https://github.com/getlantern/lantern\">github</a>页面，国内应该可以直接下载到蓝灯客户端，安装后可以使用免费版，用户可以在客户端里购买蓝灯专业版，支持支付宝付款，比较方便。</p>\n<p>蓝灯内置了两个比较有用的功能，一个是自动检测被墙网站并配置智能连接，只对这些网站应用科学上网，另一个是广告拦截，自动过滤掉各类广告和追踪请求，也很实用。</p>\n<p><strong>但是很可惜，蓝灯不支持iOS</strong> :((</p>\n<h2>专业版</h2>\n<p>蓝灯有免费版和专业版，免费版每月500M流量，蓝灯专业版的的价格也不贵。免费版很有用，可以拿来临时翻墙以此为跳板下载各类付费科学上网工具。蓝灯专业版是从客户端内购的，可以支付宝付款。</p>\n<p>不管是免费版还是专业版，<strong>蓝灯都不提供手动连接</strong>，连哪里是完全由客户端自动管理的，这对有的人来说是个优点，但对需要特定地区连接节点的人（比如需要特定IP的外服游戏玩家）来说，非常不好用。</p>\n<h2>破解版</h2>\n<p>提醒一下：网上如果流传所谓<strong>蓝灯破解版</strong>千万别下，小心挂马。蓝灯是需要客户端和服务器端协同才能正常翻墙的软件，下到一个所谓破解版是不可能可用的，一定是骗人的。把所谓破解版装到电脑上会对系统带来安全隐患。</p>\n<h2>优惠码</h2>\n<p>最后附上蓝灯优惠码：<strong>NQGP7F</strong>。想买的朋友可以用。再次提醒：<strong>蓝灯不支持iOS设备</strong>，有iOS设备的朋友，用VPN翻墙工具是最好的办法。</p>\n<h1>SSR科学上网</h1>\n<p><a href=\"https://www.wallmama.com/ssr\">SSR</a>，又称“小飞机”，或“影梭”，是<a href=\"https://shadowsocks.org/en/index.html\">ShadowSocks</a>的后续版本，目前仍保持着更新（原项目黄了）。</p>\n<p>这种方法也是完全可行的，国内很多人用，现在最常见的SSR，也有小众用户用V2Ray，WireGuard等技术，总的来说SSR够用。</p>\n<p>用得最多的VPS是<a href=\"https://indx.cc/vtr\">Vultr</a>和<a href=\"https://indx.cc/bwg\">搬瓦工</a>，网上不少人反应IP被封，但也有很多人自己搭建的SSR稳定用很久的，所以这里有运气成分。</p>\n<p>自己搭建SSR并不比买VPN便宜，即使便宜其实也很有限，主要还是VPS厂商经常送新注册用户试用金，所以感觉上一开始不用花钱，大家觉得便宜，最便宜的VPS如Vultr的2.5美金每月的，也和一些VPN的价格差不多，VPS普遍的低配机价格是5美金或以上的。</p>\n<p>要有IP被封的心里准备，好在现在的VPS换IP都不麻烦，大不了做个镜像重新开一台机会拿到新IP。不过并不是所有的换IP都免费，如果考虑换IP的成本，<strong>搭建SSR的成本未必比其它方法低</strong>。</p>\n<h1>翻墙须知</h1>\n<h2>墙并没有那么高</h2>\n<p>国内网名觉得墙很高，其实每年除了少数几个时段外，用VPN或SSR翻墙并不难，虽然也谈不上特别容易，毕竟购买VPN或者搭建SSR都要费时间费钱。很多人觉得科学上网难，大概就是几类原因。首先就是不想花钱，整天找免费的东西，免费VPN，免费SSR节点分享，免费的东西很多，也有一些确实能用的，但几乎所有免费服务最终都是很难或不可用的。绝大多数免费的VPN或者SSR节点，公网上随便一搜就搜得到，你能看到墙也能看到，多数都很短命。其次就是懂点技术的网民的那一点偏执，觉得自己架设的东西最好，不相信第三方更专业的付费服务。国内很多人用香港、日本等地的主机来搭SSR，有不少确实是稳定地用着，但也有不少IP被封，不得不折腾换IP、换主机的。所以它们觉得翻墙很难。</p>\n<p>其实翻墙只需要准备一两个工具就行了，像我自己就常备<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>和<a href=\"https://indx.cc/lantern\">蓝灯</a>，用了好几年了，除了少数敏感时期两个都挂掉以外，其余时间基本可以保证100%翻墙成功率，绝大多数时候我用ExpressVPN，虽然每天都会有几次断线重连，但极少碰到连不上的情况，最糟糕的情况也就是换个节点连一下，香港的如果连起来慢了，就换洛杉矶的，洛杉矶的慢了，就换日本、新加坡的等等。蓝灯用来作备份，因为价格便宜，但没有ExpressVPN强大，有了这两个软件，我从来没担心过无法科学上网的问题。剩下的，就是保持两个工具的更新，这是同时安装两个翻墙软件的好处，主要是为了当一个软件版本过期无法连接的时候，另一个还能连上让它更新。</p>\n<h2>为何翻墙？</h2>\n<p>翻墙是为了不影响学习与工作，不是去诋毁中国和中国人。</p>\n<p>你要明白世界的媒体是受西方控制的，舆论战里众多西方媒体是进攻的一方，而非西方阵营的国家只能选择防守，我们不说墙的存在对你我个人是好或不好，方便与不方便，如果说这个，当大概是不好也不方便，但也得明白防火墙存在在政治与国家安全上的‘合理性’。比如Facebook被封的原因：</p>\n<blockquote>\n<p>由于乌鲁木齐七·五骚乱部分新疆独立运动者使用Facebook为交流平台，引起中国大陆封锁Facebook至今。</p>\n</blockquote>\n<p>绝大多数西方媒体都带有浓烈的意识形态企图，它们绝对不是“公正中立”的，明白这一点的中国人会越来越多。<a href=\"https://user.guancha.cn/main/content?id=29826\">选择性报道，恶意扭曲的例子并不少</a>，甚至一度还有“中国共产党镇压狗”的奇葩新闻，西方媒体说谎作恶，无所不用其极。翻墙绝对不是为了去做西方媒体的喉舌，你只要被绕进去，就很难看到全部的事实了。翻墙是首先是为了不影响个人学习与工作，其次是为了更好地学习和工作，还当然有娱乐：）Googe，Youtube，Facebook，Twitter上都有大量有益的信息可以看。况且前面说了，对个人来说，墙的门槛实际上并没有你想的那么高，墙的存在并不能阻止你获得这些信息。</p>\n<p>不要假设“翻墙后”的必然选择是搞些猎奇反动的事情，翻墙后有很多有趣、有意义的东西可以看。有一些免费翻墙工具背后是美国国会支持的，典型代表是曾经流行的自由门，就有美国国会几百万美金的拨款，自由门绝对不是唯一一款，这种免费VPN会向用户不停推送反动信息，好在几年前被封了。</p>\n<h2>翻墙是否违法</h2>\n<p>如果翻墙违法，那中国政府就有几千万人要抓，经济上没有可行性。如果强制立法翻墙违法，中国政府也不会不知道其中的政治代价，除非它想让中国整个进入黑暗时代。所以基本上个人翻墙违不违法是个伪命题，日常翻个墙查个Gmail，看个Youtube没必要提心吊胆，不要被网络上所谓“翻墙罪”危言耸听蛊惑。</p>\n<p><strong>绝不要分发分享自建VPN，SSR机场，脚本等</strong></p>\n<p>国内有些小朋友看到搭建SSR这么容易，就去建机场，这是典型的作死，可以自行去搜机场主或者站长被请抓的新闻。个人VPN，SSR你自己用，请保持低调。不要到微信、微博这些地方去分发，除非你很想喝茶。分发分享自建VPN，SSR机场是犯法的。 看下面这些事件：</p>\n<p><strong>2019年3月，翻墙技术网站“逗比根据地”站长被起诉：</strong></p>\n<p>“逗比根据地”是一个提供翻墙技术的中文网站。2018年底，该网站创始人孙东洋（网名Toyo Sun）在国内被捕。在被关押5个多月后，孙东洋于2019年3月25日被以“提供侵入计算机系统工具罪”起诉。</p>\n<p><strong>2019年1月，重庆网民因使用VPN受到指控：</strong></p>\n<p>2019年1月，据网络流传的图片显示，重庆市荣昌区公安局对一名使用VPN的网民黄某的家属进行了传唤。</p>\n<p><strong>2019年1月，广东网民因使用VPN被罚款：</strong></p>\n<p>2019年1月，广东一位朱姓网民因为“擅自建立、使用非法定信道进行国际联网”被韶关市公安局警告并罚款1,000元人民币。文件显示：朱某从2018年8月到12月，在自己手机上多次使用翻墙软件蓝灯（Lantern Pro）。这是一次因个人使用VPN被罚的事件。</p>\n<h2>隐藏IP地址</h2>\n<p>连上VPN后，所有流量都走VPN软件提供的线路，相当于在本机与VPN远程服务器之间建立起一条秘密通道，入口是本机端口，出口是服务器某个端口，对被访问的网站等服务来说，直接访问者是远程服务器，从而达到隐藏本机IP地址的目的。</p>\n<p>隐藏IP地址即是保护隐私的需要，在需要访问有IP限制的服务时（如Netflix只允许部分国家的IP访问）也非常有用。</p>\n<h2><a href=\"https://en.wikipedia.org/wiki/DNS_leak\">DNS泄漏保护</a></h2>\n<p>上面说了VPN会在本机和远程服务器间开辟隧道，让流量同行，通常指的流量是数据流量，比如下载网页，DNS泄露保护，是将本机对网站域名的访问请求（转化为IP）也走VPN通道的保护机制，它最大限度地保护用户隐私，否则网络中间商就可以侦测到你的机器都访问了哪些域名，有了DNS泄露保护，网络中间商就无法嗅探到你的网站访问记录了。</p>\n<h2>混淆协议</h2>\n<p>单纯的VPN协议如OpenVPN虽然也有加密算法，但在GFW防火墙面前也不堪一击。所以好的VPN软件都会单独开发混淆协议。混淆的作用就是把VPN流量尽可能搞得不像VPN加密流量，骗过墙的侦测算法，更有效地帮助用户翻墙。</p>\n<p>ExpressVPN，VyprVPN等软件都开发了商用混淆协议，这是这类软件比普通VPN更稳定的原因。</p>\n<h2>什么是智能连接（Split Tunneling）</h2>\n<p>当你连上VPN软件后，默认所有流量都走VPN连接，这会导致访问中国国内网站（如知乎、百度、微博、优酷等）变慢。Split Tunneling允许你指定那些应用程序不走VPN线路，如在<a href=\"https://indx.cc/expcnd\">ExpressVPN</a>内，你可以配置Firefox浏览器不走VPN，Chrome浏览器走VPN，这样访问国内站点时用Firefox，访问国外站点时用Chrome，国内外网站访问速度都能达到最优。</p>\n</div>",
      "title": "翻墙与科学上网，中国VPN推荐",
      "last_reply_at": "2023-08-18T14:44:58.716Z",
      "good": false,
      "top": false,
      "reply_count": 21,
      "visit_count": 49679,
      "create_at": "2018-05-31T10:03:07.553Z",
      "author": {
        "loginname": "wallmama",
        "avatar_url": "https://avatars.githubusercontent.com/u/39631585?v=4&s=120"
      }
    },
    {
      "id": "5837c227bde2b59e06141f93",
      "author_id": "56ce68bc842c03521a73520e",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/Fp73bBSrfuKOkUeQP-wWLghr8LMk\" alt=\"untitled3.png\"></p>\n</div>",
      "title": "翻墙成功后，YouTube网站能打开，视频开不了？",
      "last_reply_at": "2023-08-18T14:44:38.600Z",
      "good": false,
      "top": false,
      "reply_count": 14,
      "visit_count": 30332,
      "create_at": "2016-11-25T04:46:31.499Z",
      "author": {
        "loginname": "JarvisQJ",
        "avatar_url": "https://avatars1.githubusercontent.com/u/15104950?v=4&s=120"
      }
    },
    {
      "id": "53c8830ec9507b4044af2bbd",
      "author_id": "53666e836839d5a7220003b5",
      "content": "<div class=\"markdown-text\"><p>要vpn的，greenvpn就是个渣渣：（\nwin7 x64上刚连上，就爆出dll错误了⊙﹏⊙b汗 是不是里面放有木马？</p>\n</div>",
      "title": "求翻樯神器：）......",
      "last_reply_at": "2023-08-18T14:43:56.437Z",
      "good": false,
      "top": false,
      "reply_count": 20,
      "visit_count": 15272,
      "create_at": "2014-07-18T02:14:38.141Z",
      "author": {
        "loginname": "kingapple",
        "avatar_url": "https://avatars.githubusercontent.com/u/6572403?v=2&s=120"
      }
    },
    {
      "id": "56cef313a1658d484d7a3676",
      "author_id": "563f17d0b0cedafd38970462",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p>在中国有很多特色的东西，防火长城阻碍了很多人浏览外界的机会，也成就了很多人，比如：一度很火的红杏。但是，这些服务，都不长久，慢慢都被和谐了。所以，掌握几个免费的Vpn是必要的。这里，介绍我常用的几个，希望对大家有帮助：</p>\n<h2>（1）Lantern</h2>\n<p>这是一个免费、简单、开源，基于P2P网络，去中心化的应用程序。它的目标就是帮助你随时随地快速、可靠、安全地访问互联网。支持移动android等。</p>\n<p>源码在这里：<a href=\"https://github.com/getlantern/lantern\">https://github.com/getlantern/lantern</a></p>\n<p>官方网站https://getlantern.org/</p>\n<p>直接下载安装即可。</p>\n<h2>（2）Bitnet</h2>\n<p>中文名叫微币，原来叫vpncoin，是一种加密货币，当然也是去中心化的应用了。一开始也是以提供科学上网vpn起家的，你可以在线挣取其他节点的上网时间。</p>\n<p>官网：<a href=\"http://www.bitnet.cc/\">http://www.bitnet.cc/</a></p>\n<h2>（3）自己快速搭建</h2>\n<p>亚马逊，提供了一个1年期的免费主机，配置也足够用了。在 ec2虚拟机上，安装一个Ubuntu服务器。使用下面的一条命令，打造一个ssh代理：</p>\n<pre class=\"prettyprint\"><code>sudo ssh -v -i ~&#x2F;.ssh&#x2F;Your.pem ubuntu@[EC2公网IP] -D 8888 -C\n</code></pre><p>Your.pem是您的密钥，aws必须的。EC2公网IP，aws会自动分配。8888为代理端口号，代理服务器是<code>localhost</code>。然后，在浏览器的代理设置里，就可以直接用了。</p>\n<p>喜欢加密货币的小盆友，可以联系我，微信：kubying</p>\n</div>",
      "title": "使用VPN翻Qiang，还用花钱吗？告诉你三种简单快捷的省钱方法。。。",
      "last_reply_at": "2023-08-18T14:43:16.168Z",
      "good": false,
      "top": false,
      "reply_count": 30,
      "visit_count": 38999,
      "create_at": "2016-02-25T12:26:59.486Z",
      "author": {
        "loginname": "imfly",
        "avatar_url": "https://avatars2.githubusercontent.com/u/12215508?v=4&s=120"
      }
    },
    {
      "id": "5db00477865a9844a301d40f",
      "author_id": "5c1783b37ec239239ff57aef",
      "tab": "ask",
      "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/FucvSLnOyFR2FB3b3F85CJ5cR8NN\" alt=\"over.png\">\n海外华人，住，学习，工作或旅游去的，如果想看中国电视剧或想听中国音乐他们会看不到。因为由于中国的地理限制。在那里生活的中国人必须找到一种解决<a href=\"https://www.vpnranks.com/zh-hans/blog/vpn%e5%9c%a8%e4%b8%ad%e5%9b%bd/\">翻墙回国</a>。如果您不在中国，则需要在大陆上提供带有VPN服务器的提供商。\nVPN用于在两个实际的独立网络之间创建虚拟网络。该技术可帮助消费者将笔记本电脑桥接到办公室或家庭网络，以便他们可以随时随地轻松访问文件。\n<strong>为什么要翻墙回国？</strong>\n一般中国人在国外不习惯住，因为文化和习惯差异。许多海外学生或华人发现，某些外国娱乐文化甚至笑声根本没有引起人们的兴趣，网络电缆可能是您唯一的娱乐方式。甚至有线电视或互联网也向您展示西方文化。那么我相信，如果您没有自己喜欢的东西，甚至无法观看自己喜欢的频道（如您在中国的工作方式），就没有生命。\n但是国内视频网站如优酷、腾讯视频、爱奇艺、哔哩哔哩上有不少只对大陆用户免费开放的影视综艺节目，却严格限制海外（包括港澳台）直接访问，海外IP会显示“该视频仅限中国大陆地区用户观看”。</p>\n<p><strong>结论</strong>\n不管你们在国外什么地方，你们想看中国电视剧或要听中国音乐你可以通过 VPN 来翻墙回国。</p>\n</div>",
      "title": "海外华人如何翻墙回国看中国电视视频?",
      "last_reply_at": "2023-08-18T14:42:56.426Z",
      "good": false,
      "top": false,
      "reply_count": 8,
      "visit_count": 90109,
      "create_at": "2019-10-23T07:42:47.366Z",
      "author": {
        "loginname": "jhontcv",
        "avatar_url": "https://avatars1.githubusercontent.com/u/45487716?v=4&s=120"
      }
    },
    {
      "id": "574e4f4679caf4c12f99e9de",
      "author_id": "537c3724c3ee0b5820257eae",
      "tab": "share",
      "content": "<div class=\"markdown-text\"><p><a href=\"https://github.com/yinghuocho/firefly-proxy\">firefly</a>\n还有windows版本和OSX版本</p>\n</div>",
      "title": "linux翻-墙软件firefly",
      "last_reply_at": "2023-08-18T14:42:20.132Z",
      "good": false,
      "top": false,
      "reply_count": 4,
      "visit_count": 7342,
      "create_at": "2016-06-01T02:58:14.856Z",
      "author": {
        "loginname": "yuedun",
        "avatar_url": "https://avatars.githubusercontent.com/u/7362116?v=4&s=120"
      }
    }
  ]
}